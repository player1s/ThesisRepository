<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1200, 800]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="game" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="Starter">
      <TextComponent name="text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Self evaluation: &amp;#10;- Stanford sleepiness scale&amp;#10;- VAS-F&amp;#10;- Fatigue Assessment Inventory&amp;#10;to start, press space" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param val="from pylsl import StreamInfo, StreamOutlet&amp;#10;from psychopy import event&amp;#10;import time &amp;#10;&amp;#10;BASELINELENGTH = 30&amp;#10;PVTSECTIONLENGTH = 60&amp;#10;MATHSECTIONLENGTH = 120&amp;#10;TETRISSECITONLEENGTH = 300&amp;#10;TETRISREPETITION = 3&amp;#10;SNAKESECITONLEENGTH = 300&amp;#10;SNAKEREPETITION = 3" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {StreamInfo, StreamOutlet} from 'pylsl';&amp;#10;import {event} from 'psychopy';&amp;#10;import * as time from 'time';&amp;#10;var BASELINELENGTH, MATHSECTIONLENGTH, PVTSECTIONLENGTH, SNAKEREPETITION, SNAKESECITONLEENGTH, TETRISREPETITION, TETRISSECITONLEENGTH;&amp;#10;BASELINELENGTH = 30;&amp;#10;PVTSECTIONLENGTH = 60;&amp;#10;MATHSECTIONLENGTH = 120;&amp;#10;TETRISSECITONLEENGTH = 300;&amp;#10;TETRISREPETITION = 3;&amp;#10;SNAKESECITONLEENGTH = 300;&amp;#10;SNAKEREPETITION = 3;&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#event ids&amp;#10;startBaseline = 1&amp;#10;startPvt = 2&amp;#10;pvtItemAppears = 3&amp;#10;startMaths = 4&amp;#10;correctAnswer = 5&amp;#10;startTetris = 6&amp;#10;tetrisFail = 7&amp;#10;levelGainTetris = 8&amp;#10;pauseTetris = 9&amp;#10;startSnake = 10&amp;#10;snakeFail = 11&amp;#10;snakeLvlUp = 12&amp;#10;pauseSnake = 13&amp;#10;&amp;#10;minuteOrSecond = 1 #1: test. 60: measurement. multiplies experiment durations (seconds). &amp;#10;&amp;#10;info = StreamInfo(name='LSL_Markers', type='Markers', channel_count=1,&amp;#10;                  channel_format='int32', source_id='Psychopy Markers')&amp;#10;# Initialize the stream.&amp;#10;outlet = StreamOutlet(info)&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="startBaseline = 1;&amp;#10;startPvt = 2;&amp;#10;pvtItemAppears = 3;&amp;#10;startMaths = 4;&amp;#10;correctAnswer = 5;&amp;#10;startTetris = 6;&amp;#10;tetrisFail = 7;&amp;#10;levelGainTetris = 8;&amp;#10;pauseTetris = 9;&amp;#10;startSnake = 10;&amp;#10;snakeFail = 11;&amp;#10;snakeLvlUp = 12;&amp;#10;pauseSnake = 13;&amp;#10;minuteOrSecond = 1;&amp;#10;info = new StreamInfo({&quot;name&quot;: &quot;LSL_Markers&quot;, &quot;type&quot;: &quot;Markers&quot;, &quot;channel_count&quot;: 1, &quot;channel_format&quot;: &quot;int32&quot;, &quot;source_id&quot;: &quot;Psychopy Markers&quot;});&amp;#10;outlet = new StreamOutlet(info);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ender">
      <TextComponent name="text_3">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Done" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="ppgTest">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="ppg test here" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Baseline">
      <TextComponent name="text_4">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$BASELINELENGTH" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;collect baseline for: &quot; + str(BASELINELENGTH) + &quot;seconds&quot; &amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="console.log(&quot;startBaseline&quot;);&amp;#10;outlet.push_sample({&quot;x&quot;: [startBaseline]});&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="print('startBaseline')&amp;#10;outlet.push_sample(x=[startBaseline])" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="pvtTest"/>
    <Routine name="QuickEvaluation"/>
    <Routine name="Tetris">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&quot;&quot;&quot;&amp;#10;Tetronimo (a Tetris clone)&amp;#10;&amp;#10;original author: Al Sweigart (al@inventwithpython.com)&amp;#10;{Making Games with Python and Pygame (2012)}&amp;#10;http://inventwithpython.com/pygame&amp;#10;Released under a &quot;Simplified BSD&quot; license&amp;#10;&amp;#10;&amp;#10;&amp;#10;Created on Thu Nov 30 10:29:55 2023&amp;#10;@author: elpid&amp;#10;&quot;&quot;&quot;&amp;#10;print('startTetris')&amp;#10;outlet.push_sample(x=[startTetris])&amp;#10;&amp;#10;repetitions = TETRISREPETITION&amp;#10;timesUntilBreak = TETRISSECITONLEENGTH  * minuteOrSecond&amp;#10;tetrisFailCount = 0&amp;#10;&amp;#10;&amp;#10;import random, time, pygame, sys&amp;#10;from pygame.locals import *&amp;#10;&amp;#10;FPS = 25&amp;#10;WINDOWWIDTH = 640&amp;#10;WINDOWHEIGHT = 480&amp;#10;BOXSIZE = 20&amp;#10;BOARDWIDTH = 10&amp;#10;BOARDHEIGHT = 20&amp;#10;BLANK = '.'&amp;#10;&amp;#10;MOVESIDEWAYSFREQ = 0.15&amp;#10;MOVEDOWNFREQ = 0.1&amp;#10;&amp;#10;XMARGIN = int((WINDOWWIDTH - BOARDWIDTH * BOXSIZE) / 2)&amp;#10;TOPMARGIN = WINDOWHEIGHT - (BOARDHEIGHT * BOXSIZE) - 5&amp;#10;&amp;#10;#               R    G    B&amp;#10;WHITE       = (255, 255, 255)&amp;#10;GRAY        = (185, 185, 185)&amp;#10;BLACK       = (  0,   0,   0)&amp;#10;RED         = (155,   0,   0)&amp;#10;LIGHTRED    = (175,  20,  20)&amp;#10;GREEN       = (  0, 155,   0)&amp;#10;LIGHTGREEN  = ( 20, 175,  20)&amp;#10;BLUE        = (  0,   0, 155)&amp;#10;LIGHTBLUE   = ( 20,  20, 175)&amp;#10;YELLOW      = (155, 155,   0)&amp;#10;LIGHTYELLOW = (175, 175,  20)&amp;#10;&amp;#10;BORDERCOLOR = BLUE&amp;#10;BGCOLOR = BLACK&amp;#10;TEXTCOLOR = WHITE&amp;#10;TEXTSHADOWCOLOR = GRAY&amp;#10;COLORS      = (     BLUE,      GREEN,      RED,      YELLOW)&amp;#10;LIGHTCOLORS = (LIGHTBLUE, LIGHTGREEN, LIGHTRED, LIGHTYELLOW)&amp;#10;assert len(COLORS) == len(LIGHTCOLORS) # each color must have light color&amp;#10;&amp;#10;TEMPLATEWIDTH = 5&amp;#10;TEMPLATEHEIGHT = 5&amp;#10;&amp;#10;S_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.....',&amp;#10;                     '..OO.',&amp;#10;                     '.OO..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..OO.',&amp;#10;                     '...O.',&amp;#10;                     '.....']]&amp;#10;&amp;#10;Z_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.....',&amp;#10;                     '.OO..',&amp;#10;                     '..OO.',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '.OO..',&amp;#10;                     '.O...',&amp;#10;                     '.....']]&amp;#10;&amp;#10;I_SHAPE_TEMPLATE = [['..O..',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     'OOOO.',&amp;#10;                     '.....',&amp;#10;                     '.....']]&amp;#10;&amp;#10;O_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.....',&amp;#10;                     '.OO..',&amp;#10;                     '.OO..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;J_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.O...',&amp;#10;                     '.OOO.',&amp;#10;                     '.....',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..OO.',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     '.OOO.',&amp;#10;                     '...O.',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.OO..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;L_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '...O.',&amp;#10;                     '.OOO.',&amp;#10;                     '.....',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '..OO.',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     '.OOO.',&amp;#10;                     '.O...',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.OO..',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;T_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '..O..',&amp;#10;                     '.OOO.',&amp;#10;                     '.....',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..OO.',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     '.OOO.',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '.OO..',&amp;#10;                     '..O..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;PIECES = {'S': S_SHAPE_TEMPLATE,&amp;#10;          'Z': Z_SHAPE_TEMPLATE,&amp;#10;          'J': J_SHAPE_TEMPLATE,&amp;#10;          'L': L_SHAPE_TEMPLATE,&amp;#10;          'I': I_SHAPE_TEMPLATE,&amp;#10;          'O': O_SHAPE_TEMPLATE,&amp;#10;          'T': T_SHAPE_TEMPLATE}&amp;#10;&amp;#10;&amp;#10;def main():&amp;#10;    global FPSCLOCK, DISPLAYSURF, BASICFONT, BIGFONT&amp;#10;    pygame.init()&amp;#10;    FPSCLOCK = pygame.time.Clock()&amp;#10;    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))&amp;#10;    BASICFONT = pygame.font.Font('freesansbold.ttf', 18)&amp;#10;    BIGFONT = pygame.font.Font('freesansbold.ttf', 100)&amp;#10;    pygame.display.set_caption('Tetromino')&amp;#10;&amp;#10;    showTextScreen('Tetromino')&amp;#10;    runGame()&amp;#10;    showTextScreen('Done')&amp;#10;    return&amp;#10;    #while True: # game loop&amp;#10;        #if random.randint(0, 1) == 0:&amp;#10;        #    pygame.mixer.music.load('tetrisb.mid')&amp;#10;        #else:&amp;#10;        #    pygame.mixer.music.load('tetrisc.mid')&amp;#10;        #pygame.mixer.music.play(-1, 0.0)&amp;#10;        #pygame.quit()&amp;#10;        #pygame.mixer.music.stop()&amp;#10;        #showTextScreen('Done')&amp;#10;        #return&amp;#10;&amp;#10;&amp;#10;def runGame():&amp;#10;    # setup variables for the start of the game&amp;#10;    board = getBlankBoard()&amp;#10;    lastMoveDownTime = time.time()&amp;#10;    lastMoveSidewaysTime = time.time()&amp;#10;    lastFallTime = time.time()&amp;#10;    movingDown = False # note: there is no movingUp variable&amp;#10;    movingLeft = False&amp;#10;    movingRight = False&amp;#10;    score = 0&amp;#10;    level, fallFreq = calculateLevelAndFallFreq(score)&amp;#10;    counter = 0&amp;#10;    breakTime = time.time()&amp;#10;&amp;#10;    fallingPiece = getNewPiece()&amp;#10;    nextPiece = getNewPiece()&amp;#10;&amp;#10;    while True: # game loop&amp;#10;&amp;#10;        nowTime = time.time()&amp;#10;        &amp;#10;        if counter == repetitions:&amp;#10;            return&amp;#10;        &amp;#10;        if nowTime &gt; breakTime + timesUntilBreak:&amp;#10;            # Pausing the game&amp;#10;            DISPLAYSURF.fill(BGCOLOR)&amp;#10;            pygame.mixer.music.stop()&amp;#10;            print('pauseTetris')&amp;#10;            outlet.push_sample(x=[pauseTetris])&amp;#10;            showTextScreen('Paused') # pause until a key press&amp;#10;            print('startTetris')&amp;#10;            outlet.push_sample(x=[startTetris])&amp;#10;            #pygame.mixer.music.play(-1, 0.0) # we dont have music thankfully&amp;#10;            lastFallTime = time.time()&amp;#10;            lastMoveDownTime = time.time()&amp;#10;            lastMoveSidewaysTime = time.time()&amp;#10;            # reset breaktimer&amp;#10;            breakTime = time.time()&amp;#10;            counter = counter + 1&amp;#10;&amp;#10;        &amp;#10;        &amp;#10;        if fallingPiece == None:&amp;#10;            # No falling piece in play, so start a new piece at the top&amp;#10;            fallingPiece = nextPiece&amp;#10;            nextPiece = getNewPiece()&amp;#10;            lastFallTime = time.time() # reset lastFallTime&amp;#10;&amp;#10;            if not isValidPosition(board, fallingPiece):&amp;#10;                board = getBlankBoard() # return for original functionlity: end game on fail. Here though we clear the board and decrease the score by 20 which decreases the level by 2.&amp;#10;                outlet.push_sample(x=[tetrisFail])&amp;#10;                print('tetrisFail')&amp;#10;                #return # can't fit a new piece on the board, so game over&amp;#10;&amp;#10;        checkForQuit()&amp;#10;        for event in pygame.event.get(): # event handling loop&amp;#10;            if event.type == KEYUP:&amp;#10;                if (event.key == K_p):&amp;#10;                    # Pausing the game&amp;#10;                    DISPLAYSURF.fill(BGCOLOR)&amp;#10;                    pygame.mixer.music.stop()&amp;#10;                    showTextScreen('Paused') # pause until a key press&amp;#10;                    #pygame.mixer.music.play(-1, 0.0)&amp;#10;                    lastFallTime = time.time()&amp;#10;                    lastMoveDownTime = time.time()&amp;#10;                    lastMoveSidewaysTime = time.time()&amp;#10;                elif (event.key == K_LEFT or event.key == K_a):&amp;#10;                    movingLeft = False&amp;#10;                elif (event.key == K_RIGHT or event.key == K_d):&amp;#10;                    movingRight = False&amp;#10;                elif (event.key == K_DOWN or event.key == K_s):&amp;#10;                    movingDown = False&amp;#10;&amp;#10;            elif event.type == KEYDOWN:&amp;#10;                # moving the piece sideways&amp;#10;                if (event.key == K_LEFT or event.key == K_a) and isValidPosition(board, fallingPiece, adjX=-1):&amp;#10;                    fallingPiece['x'] -= 1&amp;#10;                    movingLeft = True&amp;#10;                    movingRight = False&amp;#10;                    lastMoveSidewaysTime = time.time()&amp;#10;&amp;#10;                elif (event.key == K_RIGHT or event.key == K_d) and isValidPosition(board, fallingPiece, adjX=1):&amp;#10;                    fallingPiece['x'] += 1&amp;#10;                    movingRight = True&amp;#10;                    movingLeft = False&amp;#10;                    lastMoveSidewaysTime = time.time()&amp;#10;&amp;#10;                # rotating the piece (if there is room to rotate)&amp;#10;                elif (event.key == K_UP or event.key == K_w):&amp;#10;                    fallingPiece['rotation'] = (fallingPiece['rotation'] + 1) % len(PIECES[fallingPiece['shape']])&amp;#10;                    if not isValidPosition(board, fallingPiece):&amp;#10;                        fallingPiece['rotation'] = (fallingPiece['rotation'] - 1) % len(PIECES[fallingPiece['shape']])&amp;#10;                elif (event.key == K_q): # rotate the other direction&amp;#10;                    fallingPiece['rotation'] = (fallingPiece['rotation'] - 1) % len(PIECES[fallingPiece['shape']])&amp;#10;                    if not isValidPosition(board, fallingPiece):&amp;#10;                        fallingPiece['rotation'] = (fallingPiece['rotation'] + 1) % len(PIECES[fallingPiece['shape']])&amp;#10;&amp;#10;                # making the piece fall faster with the down key&amp;#10;                elif (event.key == K_DOWN or event.key == K_s):&amp;#10;                    movingDown = True&amp;#10;                    if isValidPosition(board, fallingPiece, adjY=1):&amp;#10;                        fallingPiece['y'] += 1&amp;#10;                    lastMoveDownTime = time.time()&amp;#10;&amp;#10;                # move the current piece all the way down&amp;#10;                elif event.key == K_SPACE:&amp;#10;                    movingDown = False&amp;#10;                    movingLeft = False&amp;#10;                    movingRight = False&amp;#10;                    for i in range(1, BOARDHEIGHT):&amp;#10;                        if not isValidPosition(board, fallingPiece, adjY=i):&amp;#10;                            break&amp;#10;                    fallingPiece['y'] += i - 1&amp;#10;&amp;#10;        # handle moving the piece because of user input&amp;#10;        if (movingLeft or movingRight) and time.time() - lastMoveSidewaysTime &gt; MOVESIDEWAYSFREQ:&amp;#10;            if movingLeft and isValidPosition(board, fallingPiece, adjX=-1):&amp;#10;                fallingPiece['x'] -= 1&amp;#10;            elif movingRight and isValidPosition(board, fallingPiece, adjX=1):&amp;#10;                fallingPiece['x'] += 1&amp;#10;            lastMoveSidewaysTime = time.time()&amp;#10;&amp;#10;        if movingDown and time.time() - lastMoveDownTime &gt; MOVEDOWNFREQ and isValidPosition(board, fallingPiece, adjY=1):&amp;#10;            fallingPiece['y'] += 1&amp;#10;            lastMoveDownTime = time.time()&amp;#10;&amp;#10;        # let the piece fall if it is time to fall&amp;#10;        if time.time() - lastFallTime &gt; fallFreq:&amp;#10;            # see if the piece has landed&amp;#10;            if not isValidPosition(board, fallingPiece, adjY=1):&amp;#10;                # falling piece has landed, set it on the board&amp;#10;                addToBoard(board, fallingPiece)&amp;#10;                score += removeCompleteLines(board)&amp;#10;                levelTemp = level&amp;#10;                level, fallFreq = calculateLevelAndFallFreq(score)&amp;#10;                fallingPiece = None&amp;#10;                if level == levelTemp + 1:&amp;#10;                    outlet.push_sample(x=[levelGainTetris])&amp;#10;            else:&amp;#10;                # piece did not land, just move the piece down&amp;#10;                fallingPiece['y'] += 1&amp;#10;                lastFallTime = time.time()&amp;#10;&amp;#10;        # drawing everything on the screen&amp;#10;        DISPLAYSURF.fill(BGCOLOR)&amp;#10;        drawBoard(board)&amp;#10;        drawStatus(score, level)&amp;#10;        drawNextPiece(nextPiece)&amp;#10;        if fallingPiece != None:&amp;#10;            drawPiece(fallingPiece)&amp;#10;&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick(FPS)&amp;#10;    &amp;#10;    thisExp.addData(&quot;tetrisScore&quot;, score)&amp;#10;&amp;#10;&amp;#10;def makeTextObjs(text, font, color):&amp;#10;    surf = font.render(text, True, color)&amp;#10;    return surf, surf.get_rect()&amp;#10;&amp;#10;&amp;#10;def terminate():&amp;#10;    pygame.quit()&amp;#10;    sys.exit()&amp;#10;&amp;#10;&amp;#10;def checkForKeyPress():&amp;#10;    # Go through event queue looking for a KEYUP event.&amp;#10;    # Grab KEYDOWN events to remove them from the event queue.&amp;#10;    checkForQuit()&amp;#10;&amp;#10;    for event in pygame.event.get(KEYUP): # get all the KEYUP events&amp;#10;        if event.key == K_SPACE:&amp;#10;            return 1&amp;#10;&amp;#10;    for event in pygame.event.get([KEYDOWN, KEYUP]):&amp;#10;        if event.type == KEYDOWN:&amp;#10;            continue&amp;#10;        return event.key&amp;#10;    return None&amp;#10;&amp;#10;&amp;#10;def showTextScreen(text):&amp;#10;    # This function displays large text in the&amp;#10;    # center of the screen until a key is pressed.&amp;#10;    # Draw the text drop shadow&amp;#10;    titleSurf, titleRect = makeTextObjs(text, BIGFONT, TEXTSHADOWCOLOR)&amp;#10;    titleRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))&amp;#10;    DISPLAYSURF.blit(titleSurf, titleRect)&amp;#10;&amp;#10;    # Draw the text&amp;#10;    titleSurf, titleRect = makeTextObjs(text, BIGFONT, TEXTCOLOR)&amp;#10;    titleRect.center = (int(WINDOWWIDTH / 2) - 3, int(WINDOWHEIGHT / 2) - 3)&amp;#10;    DISPLAYSURF.blit(titleSurf, titleRect)&amp;#10;&amp;#10;    # Draw the additional &quot;Press a key to play.&quot; text.&amp;#10;    pressKeySurf, pressKeyRect = makeTextObjs('Talk to the instructor', BASICFONT, TEXTCOLOR)&amp;#10;    pressKeyRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2) + 100)&amp;#10;    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)&amp;#10;&amp;#10;    while not (checkForKeyPress() == 1):&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick()&amp;#10;&amp;#10;&amp;#10;def checkForQuit():&amp;#10;    for event in pygame.event.get(QUIT): # get all the QUIT events&amp;#10;        terminate() # terminate if any QUIT events are present&amp;#10;    for event in pygame.event.get(KEYUP): # get all the KEYUP events&amp;#10;        if event.key == K_BACKSPACE:&amp;#10;            terminate() # terminate if the KEYUP event was for the Esc key&amp;#10;        pygame.event.post(event) # put the other KEYUP event objects back&amp;#10;&amp;#10;&amp;#10;def calculateLevelAndFallFreq(score):&amp;#10;    # Based on the score, return the level the player is on and&amp;#10;    # how many seconds pass until a falling piece falls one space.&amp;#10;    level = int(score / 10) + 1&amp;#10;    fallFreq = 0.3 - (level * 0.02)&amp;#10;    return level, fallFreq&amp;#10;&amp;#10;def getNewPiece():&amp;#10;    # return a random new piece in a random rotation and color&amp;#10;    shape = random.choice(list(PIECES.keys()))&amp;#10;    newPiece = {'shape': shape,&amp;#10;                'rotation': random.randint(0, len(PIECES[shape]) - 1),&amp;#10;                'x': int(BOARDWIDTH / 2) - int(TEMPLATEWIDTH / 2),&amp;#10;                'y': -2, # start it above the board (i.e. less than 0)&amp;#10;                'color': random.randint(0, len(COLORS)-1)}&amp;#10;    return newPiece&amp;#10;&amp;#10;&amp;#10;def addToBoard(board, piece):&amp;#10;    # fill in the board based on piece's location, shape, and rotation&amp;#10;    for x in range(TEMPLATEWIDTH):&amp;#10;        for y in range(TEMPLATEHEIGHT):&amp;#10;            if PIECES[piece['shape']][piece['rotation']][y][x] != BLANK:&amp;#10;                board[x + piece['x']][y + piece['y']] = piece['color']&amp;#10;&amp;#10;&amp;#10;def getBlankBoard():&amp;#10;    # create and return a new blank board data structure&amp;#10;    board = []&amp;#10;    for i in range(BOARDWIDTH):&amp;#10;        board.append([BLANK] * BOARDHEIGHT)&amp;#10;    return board&amp;#10;&amp;#10;&amp;#10;def isOnBoard(x, y):&amp;#10;    return x &gt;= 0 and x &lt; BOARDWIDTH and y &lt; BOARDHEIGHT&amp;#10;&amp;#10;&amp;#10;def isValidPosition(board, piece, adjX=0, adjY=0):&amp;#10;    # Return True if the piece is within the board and not colliding&amp;#10;    for x in range(TEMPLATEWIDTH):&amp;#10;        for y in range(TEMPLATEHEIGHT):&amp;#10;            isAboveBoard = y + piece['y'] + adjY &lt; 0&amp;#10;            if isAboveBoard or PIECES[piece['shape']][piece['rotation']][y][x] == BLANK:&amp;#10;                continue&amp;#10;            if not isOnBoard(x + piece['x'] + adjX, y + piece['y'] + adjY):&amp;#10;                return False&amp;#10;            if board[x + piece['x'] + adjX][y + piece['y'] + adjY] != BLANK:&amp;#10;                return False&amp;#10;    return True&amp;#10;&amp;#10;def isCompleteLine(board, y):&amp;#10;    # Return True if the line filled with boxes with no gaps.&amp;#10;    for x in range(BOARDWIDTH):&amp;#10;        if board[x][y] == BLANK:&amp;#10;            return False&amp;#10;    return True&amp;#10;&amp;#10;&amp;#10;def removeCompleteLines(board):&amp;#10;    # Remove any completed lines on the board, move everything above them down, and return the number of complete lines.&amp;#10;    numLinesRemoved = 0&amp;#10;    y = BOARDHEIGHT - 1 # start y at the bottom of the board&amp;#10;    while y &gt;= 0:&amp;#10;        if isCompleteLine(board, y):&amp;#10;            # Remove the line and pull boxes down by one line.&amp;#10;            for pullDownY in range(y, 0, -1):&amp;#10;                for x in range(BOARDWIDTH):&amp;#10;                    board[x][pullDownY] = board[x][pullDownY-1]&amp;#10;            # Set very top line to blank.&amp;#10;            for x in range(BOARDWIDTH):&amp;#10;                board[x][0] = BLANK&amp;#10;            numLinesRemoved += 1&amp;#10;            # Note on the next iteration of the loop, y is the same.&amp;#10;            # This is so that if the line that was pulled down is also&amp;#10;            # complete, it will be removed.&amp;#10;        else:&amp;#10;            y -= 1 # move on to check next row up&amp;#10;    return numLinesRemoved&amp;#10;&amp;#10;&amp;#10;def convertToPixelCoords(boxx, boxy):&amp;#10;    # Convert the given xy coordinates of the board to xy&amp;#10;    # coordinates of the location on the screen.&amp;#10;    return (XMARGIN + (boxx * BOXSIZE)), (TOPMARGIN + (boxy * BOXSIZE))&amp;#10;&amp;#10;&amp;#10;def drawBox(boxx, boxy, color, pixelx=None, pixely=None):&amp;#10;    # draw a single box (each tetromino piece has four boxes)&amp;#10;    # at xy coordinates on the board. Or, if pixelx &amp; pixely&amp;#10;    # are specified, draw to the pixel coordinates stored in&amp;#10;    # pixelx &amp; pixely (this is used for the &quot;Next&quot; piece).&amp;#10;    if color == BLANK:&amp;#10;        return&amp;#10;    if pixelx == None and pixely == None:&amp;#10;        pixelx, pixely = convertToPixelCoords(boxx, boxy)&amp;#10;    pygame.draw.rect(DISPLAYSURF, COLORS[color], (pixelx + 1, pixely + 1, BOXSIZE - 1, BOXSIZE - 1))&amp;#10;    pygame.draw.rect(DISPLAYSURF, LIGHTCOLORS[color], (pixelx + 1, pixely + 1, BOXSIZE - 4, BOXSIZE - 4))&amp;#10;&amp;#10;&amp;#10;def drawBoard(board):&amp;#10;    # draw the border around the board&amp;#10;    pygame.draw.rect(DISPLAYSURF, BORDERCOLOR, (XMARGIN - 3, TOPMARGIN - 7, (BOARDWIDTH * BOXSIZE) + 8, (BOARDHEIGHT * BOXSIZE) + 8), 5)&amp;#10;&amp;#10;    # fill the background of the board&amp;#10;    pygame.draw.rect(DISPLAYSURF, BGCOLOR, (XMARGIN, TOPMARGIN, BOXSIZE * BOARDWIDTH, BOXSIZE * BOARDHEIGHT))&amp;#10;    # draw the individual boxes on the board&amp;#10;    for x in range(BOARDWIDTH):&amp;#10;        for y in range(BOARDHEIGHT):&amp;#10;            drawBox(x, y, board[x][y])&amp;#10;&amp;#10;&amp;#10;def drawStatus(score, level):&amp;#10;    # draw the score text&amp;#10;    scoreSurf = BASICFONT.render('Score: %s' % score, True, TEXTCOLOR)&amp;#10;    scoreRect = scoreSurf.get_rect()&amp;#10;    scoreRect.topleft = (WINDOWWIDTH - 150, 20)&amp;#10;    DISPLAYSURF.blit(scoreSurf, scoreRect)&amp;#10;&amp;#10;    # draw the level text&amp;#10;    levelSurf = BASICFONT.render('Level: %s' % level, True, TEXTCOLOR)&amp;#10;    levelRect = levelSurf.get_rect()&amp;#10;    levelRect.topleft = (WINDOWWIDTH - 150, 50)&amp;#10;    DISPLAYSURF.blit(levelSurf, levelRect)&amp;#10;&amp;#10;&amp;#10;def drawPiece(piece, pixelx=None, pixely=None):&amp;#10;    shapeToDraw = PIECES[piece['shape']][piece['rotation']]&amp;#10;    if pixelx == None and pixely == None:&amp;#10;        # if pixelx &amp; pixely hasn't been specified, use the location stored in the piece data structure&amp;#10;        pixelx, pixely = convertToPixelCoords(piece['x'], piece['y'])&amp;#10;&amp;#10;    # draw each of the boxes that make up the piece&amp;#10;    for x in range(TEMPLATEWIDTH):&amp;#10;        for y in range(TEMPLATEHEIGHT):&amp;#10;            if shapeToDraw[y][x] != BLANK:&amp;#10;                drawBox(None, None, piece['color'], pixelx + (x * BOXSIZE), pixely + (y * BOXSIZE))&amp;#10;&amp;#10;&amp;#10;def drawNextPiece(piece):&amp;#10;    # draw the &quot;next&quot; text&amp;#10;    nextSurf = BASICFONT.render('Next:', True, TEXTCOLOR)&amp;#10;    nextRect = nextSurf.get_rect()&amp;#10;    nextRect.topleft = (WINDOWWIDTH - 120, 80)&amp;#10;    DISPLAYSURF.blit(nextSurf, nextRect)&amp;#10;    # draw the &quot;next&quot; piece&amp;#10;    drawPiece(piece, pixelx=WINDOWWIDTH-120, pixely=100)&amp;#10;&amp;#10;&amp;#10;if __name__ == '__main__':&amp;#10;    main()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Snake">
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&quot;&quot;&quot;&amp;#10;Wormy (a Nibbles clone)&amp;#10;&amp;#10;original author: Al Sweigart (al@inventwithpython.com)&amp;#10;{Making Games with Python and Pygame (2012)}&amp;#10;http://inventwithpython.com/pygame&amp;#10;Released under a &quot;Simplified BSD&quot; license&amp;#10;&amp;#10;Tweeked so that it has a specified duration and it can be paused&amp;#10;&amp;#10;Created on Mon Dec  4 17:07:57 2023&amp;#10;&amp;#10;@author: elpid&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;&amp;#10;&amp;#10;import random, pygame, sys&amp;#10;from pygame.locals import *&amp;#10;import time&amp;#10;&amp;#10;repetitions = SNAKEREPETITION&amp;#10;T_BREAK = SNAKESECITONLEENGTH * minuteOrSecond&amp;#10;outlet.push_sample(x=[startSnake])&amp;#10;print('startSnake')&amp;#10;&amp;#10;FPS = 15&amp;#10;WINDOWWIDTH = 640&amp;#10;WINDOWHEIGHT = 480&amp;#10;CELLSIZE = 20&amp;#10;assert WINDOWWIDTH % CELLSIZE == 0, &quot;Window width must be a multiple of cell size.&quot;&amp;#10;assert WINDOWHEIGHT % CELLSIZE == 0, &quot;Window height must be a multiple of cell size.&quot;&amp;#10;CELLWIDTH = int(WINDOWWIDTH / CELLSIZE)&amp;#10;CELLHEIGHT = int(WINDOWHEIGHT / CELLSIZE)&amp;#10;&amp;#10;#             R    G    B&amp;#10;WHITE     = (255, 255, 255)&amp;#10;BLACK     = (  0,   0,   0)&amp;#10;RED       = (255,   0,   0)&amp;#10;GREEN     = (  0, 255,   0)&amp;#10;DARKGREEN = (  0, 155,   0)&amp;#10;DARKGRAY  = ( 40,  40,  40)&amp;#10;BGCOLOR = BLACK&amp;#10;TEXTCOLOR = WHITE&amp;#10;&amp;#10;UP = 'up'&amp;#10;DOWN = 'down'&amp;#10;LEFT = 'left'&amp;#10;RIGHT = 'right'&amp;#10;&amp;#10;HEAD = 0 # syntactic sugar: index of the worm's head&amp;#10;&amp;#10;def main():&amp;#10;    global FPSCLOCK, DISPLAYSURF, BASICFONT, BIGFONT&amp;#10;    &amp;#10;    pygame.init()&amp;#10;    FPSCLOCK = pygame.time.Clock()&amp;#10;    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))&amp;#10;    BASICFONT = pygame.font.Font('freesansbold.ttf', 18)&amp;#10;    BIGFONT = pygame.font.Font('freesansbold.ttf', 100)&amp;#10;    pygame.display.set_caption('Wormy')&amp;#10;    &amp;#10;    showStartScreen()&amp;#10;    shouldContinue = True&amp;#10;    breakTime = time.time()&amp;#10;    timeAddition = 0&amp;#10;    loopCounter = 0&amp;#10;    while shouldContinue:&amp;#10;        print(timeAddition)&amp;#10;        shouldContinue, timeAddition, breakTime, loopCounter = runGame(breakTime, timeAddition, loopCounter)&amp;#10;    showGameOverScreen()&amp;#10;&amp;#10;&amp;#10;def runGame(breakTime, timeAddition, loopCounter):&amp;#10;    # Set a random start point.&amp;#10;    startx = 0 #random.randint(5, CELLWIDTH - 6)&amp;#10;    starty = 0 #random.randint(5, CELLHEIGHT - 6)&amp;#10;    wormCoords = [{'x': startx,     'y': starty},&amp;#10;                  {'x': startx - 1, 'y': starty},&amp;#10;                  {'x': startx - 2, 'y': starty}]&amp;#10;    direction = RIGHT&amp;#10;&amp;#10;    # Start the apple in a random place.&amp;#10;    apple = getRandomLocation()&amp;#10;&amp;#10;    &amp;#10;    while not loopCounter == repetitions: # main game loop&amp;#10;&amp;#10;        if time.time() &gt;  breakTime + T_BREAK:&amp;#10;            timeAdditionStart = time.time()&amp;#10;            outlet.push_sample(x=[pauseSnake])&amp;#10;            print('pauseSnake')&amp;#10;            showTextScreen('Paused')&amp;#10;            loopCounter = loopCounter + 1&amp;#10;            timeAdditionFinish = time.time()&amp;#10;            timeAddition = timeAddition + (timeAdditionFinish - timeAdditionStart)&amp;#10;            breakTime = time.time()&amp;#10;            outlet.push_sample(x=[startSnake])&amp;#10;            print('startSnake')&amp;#10;&amp;#10;&amp;#10;&amp;#10;        for event in pygame.event.get(): # event handling loop&amp;#10;            if event.type == QUIT:&amp;#10;                terminate()&amp;#10;            elif event.type == KEYDOWN:&amp;#10;                if (event.key == K_LEFT or event.key == K_a) and direction != RIGHT:&amp;#10;                    direction = LEFT&amp;#10;                elif (event.key == K_RIGHT or event.key == K_d) and direction != LEFT:&amp;#10;                    direction = RIGHT&amp;#10;                elif (event.key == K_UP or event.key == K_w) and direction != DOWN:&amp;#10;                    direction = UP&amp;#10;                elif (event.key == K_DOWN or event.key == K_s) and direction != UP:&amp;#10;                    direction = DOWN&amp;#10;                elif event.key == K_ESCAPE:&amp;#10;                    terminate()&amp;#10;            elif event.type == KEYUP:&amp;#10;                if (event.key == K_p):&amp;#10;                    # Pausing the game&amp;#10;                    showTextScreen('Paused') # pause until a key press&amp;#10; &amp;#10;&amp;#10;        # check if the worm has hit itself or the edge&amp;#10;        if wormCoords[HEAD]['x'] == -1 or wormCoords[HEAD]['x'] == CELLWIDTH or wormCoords[HEAD]['y'] == -1 or wormCoords[HEAD]['y'] == CELLHEIGHT:&amp;#10;            outlet.push_sample(x=[snakeFail])&amp;#10;            print('snakeFail')&amp;#10;            return True, timeAddition, breakTime, loopCounter# game over&amp;#10;        for wormBody in wormCoords[1:]:&amp;#10;            if wormBody['x'] == wormCoords[HEAD]['x'] and wormBody['y'] == wormCoords[HEAD]['y']:&amp;#10;                outlet.push_sample(x=[snakeFail])&amp;#10;                print('snakeFail')&amp;#10;                return True, timeAddition, breakTime, loopCounter# game over&amp;#10;&amp;#10;        # check if worm has eaten an apply&amp;#10;        if wormCoords[HEAD]['x'] == apple['x'] and wormCoords[HEAD]['y'] == apple['y']:&amp;#10;            # don't remove worm's tail segment&amp;#10;            apple = getRandomLocation() # set a new apple somewhere&amp;#10;        else:&amp;#10;            del wormCoords[-1] # remove worm's tail segment&amp;#10;&amp;#10;        # move the worm by adding a segment in the direction it is moving&amp;#10;        if direction == UP:&amp;#10;            newHead = {'x': wormCoords[HEAD]['x'], 'y': wormCoords[HEAD]['y'] - 1}&amp;#10;        elif direction == DOWN:&amp;#10;            newHead = {'x': wormCoords[HEAD]['x'], 'y': wormCoords[HEAD]['y'] + 1}&amp;#10;        elif direction == LEFT:&amp;#10;            newHead = {'x': wormCoords[HEAD]['x'] - 1, 'y': wormCoords[HEAD]['y']}&amp;#10;        elif direction == RIGHT:&amp;#10;            newHead = {'x': wormCoords[HEAD]['x'] + 1, 'y': wormCoords[HEAD]['y']}&amp;#10;        wormCoords.insert(0, newHead)&amp;#10;        DISPLAYSURF.fill(BGCOLOR)&amp;#10;        drawGrid()&amp;#10;        drawWorm(wormCoords)&amp;#10;        drawApple(apple)&amp;#10;        drawScore(len(wormCoords) - 3)&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick(FPS)&amp;#10;        nowTime = time.time()&amp;#10;    return False, timeAddition, breakTime, loopCounter&amp;#10;&amp;#10;def drawPressKeyMsg():&amp;#10;    pressKeySurf = BASICFONT.render('Press a key to play.', True, DARKGRAY)&amp;#10;    pressKeyRect = pressKeySurf.get_rect()&amp;#10;    pressKeyRect.topleft = (WINDOWWIDTH - 200, WINDOWHEIGHT - 30)&amp;#10;    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)&amp;#10;&amp;#10;&amp;#10;def checkForKeyPress():&amp;#10;    if len(pygame.event.get(QUIT)) &gt; 0:&amp;#10;        terminate()&amp;#10;&amp;#10;    keyUpEvents = pygame.event.get(KEYUP)&amp;#10;    &amp;#10;&amp;#10;    for event in keyUpEvents: # get all the KEYUP events&amp;#10;        if event.key == K_SPACE:&amp;#10;            return 1&amp;#10;    if len(keyUpEvents) == 0:&amp;#10;        return None&amp;#10;    if keyUpEvents[0].key == K_ESCAPE:&amp;#10;        terminate()&amp;#10;    return keyUpEvents[0].key&amp;#10;&amp;#10;&amp;#10;def showStartScreen():&amp;#10;    titleFont = pygame.font.Font('freesansbold.ttf', 100)&amp;#10;    titleSurf1 = titleFont.render('Wormy!', True, WHITE, DARKGREEN)&amp;#10;    titleSurf2 = titleFont.render('Wormy!', True, GREEN)&amp;#10;&amp;#10;    degrees1 = 0&amp;#10;    degrees2 = 0&amp;#10;    while True:&amp;#10;        DISPLAYSURF.fill(BGCOLOR)&amp;#10;        rotatedSurf1 = pygame.transform.rotate(titleSurf1, degrees1)&amp;#10;        rotatedRect1 = rotatedSurf1.get_rect()&amp;#10;        rotatedRect1.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)&amp;#10;        DISPLAYSURF.blit(rotatedSurf1, rotatedRect1)&amp;#10;&amp;#10;        rotatedSurf2 = pygame.transform.rotate(titleSurf2, degrees2)&amp;#10;        rotatedRect2 = rotatedSurf2.get_rect()&amp;#10;        rotatedRect2.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)&amp;#10;        DISPLAYSURF.blit(rotatedSurf2, rotatedRect2)&amp;#10;&amp;#10;        drawPressKeyMsg()&amp;#10;&amp;#10;        if checkForKeyPress():&amp;#10;            pygame.event.get() # clear event queue&amp;#10;            return&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick(FPS)&amp;#10;        degrees1 += 3 # rotate by 3 degrees each frame&amp;#10;        degrees2 += 7 # rotate by 7 degrees each frame&amp;#10;&amp;#10;&amp;#10;def terminate():&amp;#10;    pygame.quit()&amp;#10;    sys.exit()&amp;#10;&amp;#10;&amp;#10;def getRandomLocation():&amp;#10;    return {'x': random.randint(0, CELLWIDTH - 1), 'y': random.randint(0, CELLHEIGHT - 1)}&amp;#10;&amp;#10;&amp;#10;def showGameOverScreen():&amp;#10;    gameOverFont = pygame.font.Font('freesansbold.ttf', 150)&amp;#10;    gameSurf = gameOverFont.render('Game', True, WHITE)&amp;#10;    overSurf = gameOverFont.render('Over', True, WHITE)&amp;#10;    gameRect = gameSurf.get_rect()&amp;#10;    overRect = overSurf.get_rect()&amp;#10;    gameRect.midtop = (WINDOWWIDTH / 2, 10)&amp;#10;    overRect.midtop = (WINDOWWIDTH / 2, gameRect.height + 10 + 25)&amp;#10;&amp;#10;    DISPLAYSURF.blit(gameSurf, gameRect)&amp;#10;    DISPLAYSURF.blit(overSurf, overRect)&amp;#10;    drawPressKeyMsg()&amp;#10;    pygame.display.update()&amp;#10;    pygame.time.wait(500)&amp;#10;    checkForKeyPress() # clear out any key presses in the event queue&amp;#10;&amp;#10;    while True:&amp;#10;        if checkForKeyPress():&amp;#10;            pygame.event.get() # clear event queue&amp;#10;            return&amp;#10;&amp;#10;def drawScore(score):&amp;#10;    scoreSurf = BASICFONT.render('Score: %s' % (score), True, WHITE)&amp;#10;    scoreRect = scoreSurf.get_rect()&amp;#10;    scoreRect.topleft = (WINDOWWIDTH - 120, 10)&amp;#10;    DISPLAYSURF.blit(scoreSurf, scoreRect)&amp;#10;&amp;#10;&amp;#10;def drawWorm(wormCoords):&amp;#10;    for coord in wormCoords:&amp;#10;        x = coord['x'] * CELLSIZE&amp;#10;        y = coord['y'] * CELLSIZE&amp;#10;        wormSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)&amp;#10;        pygame.draw.rect(DISPLAYSURF, DARKGREEN, wormSegmentRect)&amp;#10;        wormInnerSegmentRect = pygame.Rect(x + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8)&amp;#10;        pygame.draw.rect(DISPLAYSURF, GREEN, wormInnerSegmentRect)&amp;#10;&amp;#10;&amp;#10;def drawApple(coord):&amp;#10;    x = coord['x'] * CELLSIZE&amp;#10;    y = coord['y'] * CELLSIZE&amp;#10;    appleRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)&amp;#10;    pygame.draw.rect(DISPLAYSURF, RED, appleRect)&amp;#10;&amp;#10;&amp;#10;def drawGrid():&amp;#10;    for x in range(0, WINDOWWIDTH, CELLSIZE): # draw vertical lines&amp;#10;        pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOWHEIGHT))&amp;#10;    for y in range(0, WINDOWHEIGHT, CELLSIZE): # draw horizontal lines&amp;#10;        pygame.draw.line(DISPLAYSURF, DARKGRAY, (0, y), (WINDOWWIDTH, y))&amp;#10;&amp;#10;&amp;#10;def makeTextObjs(text, font, color):&amp;#10;    surf = font.render(text, True, color)&amp;#10;    return surf, surf.get_rect()&amp;#10;&amp;#10;&amp;#10;def showTextScreen(text):&amp;#10;    # This function displays large text in the&amp;#10;    # center of the screen until a key is pressed.&amp;#10;&amp;#10;    # Draw the text&amp;#10;    titleSurf, titleRect = makeTextObjs(text, BIGFONT, TEXTCOLOR)&amp;#10;    titleRect.center = (int(WINDOWWIDTH / 2) - 3, int(WINDOWHEIGHT / 2) - 3)&amp;#10;    DISPLAYSURF.blit(titleSurf, titleRect)&amp;#10;&amp;#10;    # Draw the additional &quot;Press a key to play.&quot; text.&amp;#10;    pressKeySurf, pressKeyRect = makeTextObjs('Press space to continue.', BASICFONT, TEXTCOLOR)&amp;#10;    pressKeyRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2) + 100)&amp;#10;    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)&amp;#10;&amp;#10;    while not (checkForKeyPress() == 1):&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick()&amp;#10;&amp;#10;&amp;#10;if __name__ == '__main__':&amp;#10;    main()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="ISI">
      <CodeComponent name="ISIcode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# All the durations are in seconds&amp;#10;# Random ISI between 1 and 4. &amp;#10;minISI = 1&amp;#10;maxISI = 4&amp;#10;&amp;#10;# Task duration&amp;#10;length_of_task = 10 * minuteOrSecond&amp;#10;&amp;#10;# Feedback duration &amp;#10;feed = 0.5&amp;#10;&amp;#10;# A timer&amp;#10;timing = core.Clock()&amp;#10;# ISI is then set each routine&amp;#10;randISI = random.randint(0,maxISI - minISI) + minISI&amp;#10;&amp;#10;overall_timer = core.Clock()&amp;#10;&amp;#10;# A message when participant miss&amp;#10;message = 'You did not hit the button!'&amp;#10;&amp;#10;# Adding the ISI so it is saved in the datafile&amp;#10;thisExp.addData('ISI', randISI)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="keys = dontrespond.getKeys(keyList=['space'], waitRelease=False)&amp;#10;keys = [key.name for key in keys]&amp;#10;&amp;#10;# Append True to list if a key is pressed, clear list if not&amp;#10;if &quot;space&quot; in keys:&amp;#10;     message = 'Too soon!'&amp;#10;     continueRoutine = False&amp;#10;    " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="ISIcode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="ISI_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="ISI_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$randISI" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="dontrespond">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="dontrespond" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$randISI-1" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Target">
      <CodeComponent name="Target_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="print('pvtItemAppears')&amp;#10;outlet.push_sample(x=[pvtItemAppears])&amp;#10;# Reset the timer&amp;#10;timing.reset()&amp;#10;&amp;#10;# Check for response&amp;#10;if message == 'Too soon!':&amp;#10;    # Adding 0 to Accuracy and missing to RTms&amp;#10;    thisExp.addData('Accuracy', 0)&amp;#10;    thisExp.addData('RTms', np.NAN)&amp;#10;    # End the Routine to continue next trial&amp;#10;    continueRoutine = False&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# counter in seconds&amp;#10;time = int(round(timing.getTime(), 3) * 1000)&amp;#10;&amp;#10;    &amp;#10;# PsychoPy is not running the trial for more than 29.991...&amp;#10;if timing.getTime() &gt;= 4.99:&amp;#10;        message = 'No response!'&amp;#10;        Response.rt = timing.getTime()&amp;#10;        thisExp.addData('RTms', np.NAN)&amp;#10;        thisExp.addData('Accuracy', 0)&amp;#10;        continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if type(Response.rt) is float:&amp;#10;    message = str(round(Response.rt * 1000))&amp;#10;    thisExp.addData('Accuracy', 1)&amp;#10;    thisExp.addData('RTms', Response.rt * 1000)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="Target_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="Targetstim">
        <Param val="red" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Targetstim" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$time" valType="str" updates="set every frame" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="Response">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="Response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Feedback">
      <TextComponent name="Feedback_text">
        <Param val="green" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="Feedback_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$feed" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$message" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="End_task">
      <CodeComponent name="End_task_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="import time&amp;#10;# Get the time in the task&amp;#10;time_in_task = overall_timer.getTime()&amp;#10;nowtime = time.time()&amp;#10;&amp;#10;# If time_in_task corresponds to the duration we set previously we end te task&amp;#10;print(nowtime, pvtStarter, pvtSectionLength)&amp;#10;if nowtime &gt; pvtStarter + pvtSectionLength:&amp;#10;    currentLoop.finished = True&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="End_task_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Maths_Intro">
      <TextComponent name="text_6">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_6" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Maths task: you will be presented a simple equation that you need to solve. &amp;#10;- You cannot advance if you give an incorrect answer. &amp;#10;- Solve as much equations as you can in 2 minutes.&amp;#10;&amp;#10;Press space to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_8">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="import * as time from 'time';&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import time" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="mathStarter = time.time();&amp;#10;mathSectionLength = (MATHSECTIONLENGTH * minuteOrSecond);&amp;#10;console.log(&quot;startMaths&quot;);&amp;#10;outlet.push_sample({&quot;x&quot;: [startMaths]});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="mathStarter = time.time()&amp;#10;mathSectionLength = MATHSECTIONLENGTH  * minuteOrSecond&amp;#10;print('startMaths')&amp;#10;outlet.push_sample(x=[startMaths])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_8" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="MathsNumGeneration">
      <CodeComponent name="code_5">
        <Param val="import random" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="answer = 0;&amp;#10;while ((! ((answer.toString().length === 2) &amp;&amp; (answer &gt; 0)))) {&amp;#10;    numberOne = random.randint(1, 99);&amp;#10;    numberTwo = random.randint(1, 99);&amp;#10;    operator = random.randint(0, 3);&amp;#10;    operatorString = &quot;&quot;;&amp;#10;    if ((operator === 0)) {&amp;#10;        operatorString = &quot;+&quot;;&amp;#10;        answer = (numberOne + numberTwo);&amp;#10;    } else {&amp;#10;        if ((operator === 1)) {&amp;#10;            operatorString = &quot;-&quot;;&amp;#10;            answer = (numberOne - numberTwo);&amp;#10;        } else {&amp;#10;            if ((operator === 2)) {&amp;#10;                operatorString = &quot;*&quot;;&amp;#10;                answer = (numberOne * numberTwo);&amp;#10;            } else {&amp;#10;                if ((operator === 3)) {&amp;#10;                    operatorString = &quot;/&quot;;&amp;#10;                    answer = (numberOne / numberTwo);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    displayText = ((((numberOne.toString() + &quot; &quot;) + operatorString) + &quot; &quot;) + numberTwo.toString());&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="answer = 0&amp;#10;while not (len(str(answer)) == 2 and answer &gt; 0):&amp;#10;    numberOne = random.randint(1,99)&amp;#10;    numberTwo = random.randint(1,99)&amp;#10;    operator = random.randint(0,3)&amp;#10;    operatorString = &quot;&quot;&amp;#10;&amp;#10;    if operator == 0:&amp;#10;        operatorString = &quot;+&quot;&amp;#10;        answer = numberOne + numberTwo&amp;#10;        &amp;#10;    elif operator == 1:&amp;#10;        operatorString = &quot;-&quot;&amp;#10;        answer = numberOne - numberTwo&amp;#10;        &amp;#10;    elif operator == 2:&amp;#10;        operatorString = &quot;*&quot;&amp;#10;        answer = numberOne * numberTwo&amp;#10;        &amp;#10;    elif operator == 3:&amp;#10;        operatorString = &quot;/&quot;&amp;#10;        answer = numberOne / numberTwo&amp;#10;        &amp;#10;    displayText = str(numberOne) + &quot; &quot; + operatorString + &quot; &quot; + str(numberTwo)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="MathsTask">
      <TextComponent name="text_8">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_8" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(100, 100)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param val="'0','1','2','3','4','5','6','7','8','9'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_3" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="all keys" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_6">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="proposed = &quot;&quot;;&amp;#10;proposedInt = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="proposed = &quot;&quot;&amp;#10;proposedInt = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="keys = key_resp_3.getKeys(['0','1','2','3','4','5','6','7','8','9'], waitRelease=True)&amp;#10;&amp;#10;for key in keys:&amp;#10;    proposed = proposed + str(key.name)&amp;#10;    text_8.text=key.name&amp;#10;    &amp;#10;if len(proposed) == 2:&amp;#10;    proposedInt = int(proposed)&amp;#10;    if proposedInt == answer:&amp;#10;        print(&quot;break routine idk how&quot;)&amp;#10;    else:&amp;#10;        text_8.text=&quot;Incorrect, try again&quot;&amp;#10;        proposed = &quot;&quot;&amp;#10;        " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="keys = key_resp_3.getKeys([&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;], {&quot;waitRelease&quot;: true});&amp;#10;for (var key, _pj_c = 0, _pj_a = keys, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    key = _pj_a[_pj_c];&amp;#10;    proposed = (proposed + key.name.toString());&amp;#10;    text_8.text = key.name;&amp;#10;}&amp;#10;if ((proposed.length === 2)) {&amp;#10;    proposedInt = Number.parseInt(proposed);&amp;#10;    if ((proposedInt === answer)) {&amp;#10;        console.log(&quot;break routine idk how&quot;);&amp;#10;    } else {&amp;#10;        text_8.text = &quot;Incorrect, try again&quot;;&amp;#10;        proposed = &quot;&quot;;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_6" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_9">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_9" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$displayText" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="mathsTaskNew">
      <CodeComponent name="code_7">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="import * as time from 'time';&amp;#10;var failCounter, proposed, proposedInt;&amp;#10;proposed = &quot;&quot;;&amp;#10;proposedInt = 0;&amp;#10;failCounter = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="import time&amp;#10;proposed = &quot;&quot;&amp;#10;proposedInt = 0&amp;#10;failCounter = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="nowtime = time.time()&amp;#10;msg = &quot;&quot;&amp;#10;&amp;#10;if nowtime &gt; mathStarter + mathSectionLength:&amp;#10;    text_7.text = &quot;time is up&quot;&amp;#10;    continueRoutine = False&amp;#10;    currentLoop.finished = True&amp;#10;    msg = &quot;time is up&quot;&amp;#10;&amp;#10;keys = key_resp_4.getKeys(['1','2','3','4','5','6','7','8','9','0'], waitRelease=True)&amp;#10;&amp;#10;for key in keys:&amp;#10;    proposed = proposed + str(key.name)&amp;#10;    text_7.text=key.name&amp;#10;    &amp;#10;if len(proposed) == 2:&amp;#10;    proposedInt = int(proposed)&amp;#10;    if proposedInt == answer:&amp;#10;        continueRoutine = False&amp;#10;        text_7.text=key.name&amp;#10;        time.sleep(0.25)&amp;#10;    else:&amp;#10;        text_7.text=displayText&amp;#10;        proposed = &quot;&quot;&amp;#10;        failCounter = failCounter + 1&amp;#10;        " valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="nowtime = time.time();&amp;#10;msg = &quot;&quot;;&amp;#10;if ((nowtime &gt; (mathStarter + mathSectionLength))) {&amp;#10;    text_7.text = &quot;time is up&quot;;&amp;#10;    continueRoutine = false;&amp;#10;    currentLoop.finished = true;&amp;#10;    msg = &quot;time is up&quot;;&amp;#10;}&amp;#10;keys = key_resp_4.getKeys([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;0&quot;], {&quot;waitRelease&quot;: true});&amp;#10;for (var key, _pj_c = 0, _pj_a = keys, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    key = _pj_a[_pj_c];&amp;#10;    proposed = (proposed + key.name.toString());&amp;#10;    text_7.text = key.name;&amp;#10;}&amp;#10;if ((proposed.length === 2)) {&amp;#10;    proposedInt = Number.parseInt(proposed);&amp;#10;    if ((proposedInt === answer)) {&amp;#10;        continueRoutine = false;&amp;#10;        text_7.text = key.name;&amp;#10;        time.sleep(0.25);&amp;#10;    } else {&amp;#10;        text_7.text = displayText;&amp;#10;        proposed = &quot;&quot;;&amp;#10;        failCounter = (failCounter + 1);&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="text_7.text = &quot;time is up&quot;;&amp;#10;if ((! (msg === &quot;time is up&quot;))) {&amp;#10;    console.log(&quot;correctAnswer&quot;);&amp;#10;    outlet.push_sample({&quot;x&quot;: [correctAnswer]});&amp;#10;    psychoJS.experiment.addData(&quot;MathsFailCounter&quot;, failCounter);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="text_7.text = &quot;time is up&quot;&amp;#10;if not msg == &quot;time is up&quot;:&amp;#10;    print('correctAnswer')&amp;#10;    outlet.push_sample(x=[correctAnswer])&amp;#10;    thisExp.addData(&quot;MathsFailCounter&quot;, failCounter)" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_7" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_4">
        <Param val="'1','2','3','4','5','6','7','8','9','0'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_4" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="text_7">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_7" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$displayText" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="InstructionsPVT">
      <TextComponent name="InstructionsText">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="InstructionsText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In this task, you are to press the SPACEBAR as quick as possible after a red counter appears&amp;#10;on screen.&amp;#10;&amp;#10;&amp;#10;Start the task by pressing the  SPACEBAR." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="InstrucKey">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="InstrucKey" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_9">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="pvtSectionLength = (PVTSECTIONLENGTH * minuteOrSecond);&amp;#10;pvtStarter = time.time();&amp;#10;console.log(&quot;startPvt&quot;);&amp;#10;outlet.push_sample({&quot;x&quot;: [startPvt]});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="pvtSectionLength = PVTSECTIONLENGTH * minuteOrSecond&amp;#10;pvtStarter = time.time()&amp;#10;print('startPvt')&amp;#10;outlet.push_sample(x=[startPvt])&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_9" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Fatigue_Assessment_Inventory">
      <TextComponent name="text_5">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_5" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_10">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="fatigueAssessmentInventoryString = ''&amp;#10;fatigueAssessmentInventoryCounter = 0&amp;#10;questionAmount = 29" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="fatigueAssessmentInventoryString = &quot;&quot;;&amp;#10;fatigueAssessmentInventoryCounter = 0;&amp;#10;questionAmount = 29;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fatigueAssessmentInventoryCounter = (fatigueAssessmentInventoryCounter + 1);&amp;#10;if ((fatigueAssessmentInventoryCounter === 1)) {&amp;#10;    text_5.text = &quot;I feel drowsy when I am fatigued&quot;;&amp;#10;} else {&amp;#10;    if ((fatigueAssessmentInventoryCounter === 2)) {&amp;#10;        text_5.text = &quot;When I am fatigued, I lose my patience&quot;;&amp;#10;    } else {&amp;#10;        if ((fatigueAssessmentInventoryCounter === 3)) {&amp;#10;            text_5.text = &quot;My motivation is lower when I am fatigued&quot;;&amp;#10;        } else {&amp;#10;            if ((fatigueAssessmentInventoryCounter === 4)) {&amp;#10;                text_5.text = &quot;When I am fatigued, I have difficulty concentrating&quot;;&amp;#10;            } else {&amp;#10;                if ((fatigueAssessmentInventoryCounter === 5)) {&amp;#10;                    text_5.text = &quot;Exercise brings on my fatigue&quot;;&amp;#10;                } else {&amp;#10;                    if ((fatigueAssessmentInventoryCounter === 6)) {&amp;#10;                        text_5.text = &quot;Heat brings on my fatigue&quot;;&amp;#10;                    } else {&amp;#10;                        if ((fatigueAssessmentInventoryCounter === 7)) {&amp;#10;                            text_5.text = &quot;Long periods of inactivity bring on my fatigue&quot;;&amp;#10;                        } else {&amp;#10;                            if ((fatigueAssessmentInventoryCounter === 8)) {&amp;#10;                                text_5.text = &quot;Stress brings on my fatigue&quot;;&amp;#10;                            } else {&amp;#10;                                if ((fatigueAssessmentInventoryCounter === 9)) {&amp;#10;                                    text_5.text = &quot;Depression brings on my fatigue&quot;;&amp;#10;                                } else {&amp;#10;                                    if ((fatigueAssessmentInventoryCounter === 10)) {&amp;#10;                                        text_5.text = &quot;Work brings on my fatigue&quot;;&amp;#10;                                    } else {&amp;#10;                                        if ((fatigueAssessmentInventoryCounter === 11)) {&amp;#10;                                            text_5.text = &quot;My fatigue is worse in the afternoon&quot;;&amp;#10;                                        } else {&amp;#10;                                            if ((fatigueAssessmentInventoryCounter === 12)) {&amp;#10;                                                text_5.text = &quot;My fatigue is worse in the morning&quot;;&amp;#10;                                            } else {&amp;#10;                                                if ((fatigueAssessmentInventoryCounter === 13)) {&amp;#10;                                                    text_5.text = &quot;Performance of routine daily activities increases my fatigue&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if ((fatigueAssessmentInventoryCounter === 14)) {&amp;#10;                                                        text_5.text = &quot;Resting lessens my fatigue&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if ((fatigueAssessmentInventoryCounter === 15)) {&amp;#10;                                                            text_5.text = &quot;Sleeping lessens my fatigue&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if ((fatigueAssessmentInventoryCounter === 16)) {&amp;#10;                                                                text_5.text = &quot;Cool temperatures lessen my fatiuge&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if ((fatigueAssessmentInventoryCounter === 17)) {&amp;#10;                                                                    text_5.text = &quot;Positive experiences lessen my fatigue&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if ((fatigueAssessmentInventoryCounter === 18)) {&amp;#10;                                                                        text_5.text = &quot;I am easily fatigued&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if ((fatigueAssessmentInventoryCounter === 19)) {&amp;#10;                                                                            text_5.text = &quot;Fatigue interferes with my physical functioning&quot;;&amp;#10;                                                                        } else {&amp;#10;                                                                            if ((fatigueAssessmentInventoryCounter === 20)) {&amp;#10;                                                                                text_5.text = &quot;Fatiuge causes frequent problems for me&quot;;&amp;#10;                                                                            } else {&amp;#10;                                                                                if ((fatigueAssessmentInventoryCounter === 21)) {&amp;#10;                                                                                    text_5.text = &quot;My fatigue prevents sustained physical functioning&quot;;&amp;#10;                                                                                } else {&amp;#10;                                                                                    if ((fatigueAssessmentInventoryCounter === 22)) {&amp;#10;                                                                                        text_5.text = &quot;Fatigues interferes with carrying out certain duties and responsibilities&quot;;&amp;#10;                                                                                    } else {&amp;#10;                                                                                        if ((fatigueAssessmentInventoryCounter === 23)) {&amp;#10;                                                                                            text_5.text = &quot;Fatiuge predated other symptoms of my condition&quot;;&amp;#10;                                                                                        } else {&amp;#10;                                                                                            if ((fatigueAssessmentInventoryCounter === 24)) {&amp;#10;                                                                                                text_5.text = &quot;Fatigue is my most disabling symptom&quot;;&amp;#10;                                                                                            } else {&amp;#10;                                                                                                if ((fatigueAssessmentInventoryCounter === 25)) {&amp;#10;                                                                                                    text_5.text = &quot;Fatiuge is among my 3 most disabling symptoms&quot;;&amp;#10;                                                                                                } else {&amp;#10;                                                                                                    if ((fatigueAssessmentInventoryCounter === 26)) {&amp;#10;                                                                                                        text_5.text = &quot;Fatigue interferes with my work, family or social life&quot;;&amp;#10;                                                                                                    } else {&amp;#10;                                                                                                        if ((fatigueAssessmentInventoryCounter === 27)) {&amp;#10;                                                                                                            text_5.text = &quot;Fatigue makes other symptoms worse&quot;;&amp;#10;                                                                                                        } else {&amp;#10;                                                                                                            if ((fatigueAssessmentInventoryCounter === 28)) {&amp;#10;                                                                                                                text_5.text = &quot;Fatigue that i now experience is different in quality or severity than the fatigue i experienced before i developed this condition&quot;;&amp;#10;                                                                                                            } else {&amp;#10;                                                                                                                if ((fatigueAssessmentInventoryCounter === 29)) {&amp;#10;                                                                                                                    text_5.text = &quot;I experienced prolonged fatigue after exercise&quot;;&amp;#10;                                                                                                                }&amp;#10;                                                                                                            }&amp;#10;                                                                                                        }&amp;#10;                                                                                                    }&amp;#10;                                                                                                }&amp;#10;                                                                                            }&amp;#10;                                                                                        }&amp;#10;                                                                                    }&amp;#10;                                                                                }&amp;#10;                                                                            }&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="fatigueAssessmentInventoryCounter = fatigueAssessmentInventoryCounter + 1&amp;#10;&amp;#10;if fatigueAssessmentInventoryCounter == 1:&amp;#10;    text_5.text = &quot;I feel drowsy when I am fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 2:&amp;#10;    text_5.text = &quot;When I am fatigued, I lose my patience&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 3:&amp;#10;    text_5.text = &quot;My motivation is lower when I am fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 4:&amp;#10;    text_5.text = &quot;When I am fatigued, I have difficulty concentrating&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 5:&amp;#10;    text_5.text = &quot;Exercise brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 6:&amp;#10;    text_5.text = &quot;Heat brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 7:&amp;#10;    text_5.text = &quot;Long periods of inactivity bring on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 8:&amp;#10;    text_5.text = &quot;Stress brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 9:&amp;#10;    text_5.text = &quot;Depression brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 10:&amp;#10;    text_5.text = &quot;Work brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 11:&amp;#10;    text_5.text = &quot;My fatigue is worse in the afternoon&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 12:&amp;#10;    text_5.text = &quot;My fatigue is worse in the morning&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 13:&amp;#10;    text_5.text = &quot;Performance of routine daily activities increases my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 14:&amp;#10;    text_5.text = &quot;Resting lessens my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 15:&amp;#10;    text_5.text = &quot;Sleeping lessens my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 16:&amp;#10;    text_5.text = &quot;Cool temperatures lessen my fatiuge&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 17:&amp;#10;    text_5.text = &quot;Positive experiences lessen my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 18:&amp;#10;    text_5.text = &quot;I am easily fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 19:&amp;#10;    text_5.text = &quot;Fatigue interferes with my physical functioning&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 20:&amp;#10;    text_5.text = &quot;Fatiuge causes frequent problems for me&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 21:&amp;#10;    text_5.text = &quot;My fatigue prevents sustained physical functioning&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 22:&amp;#10;    text_5.text = &quot;Fatigues interferes with carrying out certain duties and responsibilities&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 23:&amp;#10;    text_5.text = &quot;Fatiuge predated other symptoms of my condition&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 24:&amp;#10;    text_5.text = &quot;Fatigue is my most disabling symptom&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 25:&amp;#10;    text_5.text = &quot;Fatiuge is among my 3 most disabling symptoms&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 26:&amp;#10;    text_5.text = &quot;Fatigue interferes with my work, family or social life&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 27:&amp;#10;    text_5.text = &quot;Fatigue makes other symptoms worse&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 28:&amp;#10;    text_5.text = &quot;Fatigue that i now experience is different in quality or severity than the fatigue i experienced before i developed this condition&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 29:&amp;#10;    text_5.text = &quot;I experienced prolonged fatigue after exercise&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_10" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <SliderComponent name="slider">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="LightGray" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Red" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="4" valType="code" updates="None" name="initVal"/>
        <Param val="(&quot;Disagree: &quot; + str(1), 2, 3, 4, 5, 6, &quot;Agree: &quot; + str(7))" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,-0.1)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.0, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="rating" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5, 6, 7)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
    </Routine>
    <Routine name="Stanford_sleepiness_scale">
      <TextComponent name="text_10">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_10" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_11">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="fatigueAssessmentInventoryString = ''&amp;#10;fatigueAssessmentInventoryCounter = 0&amp;#10;questionAmount = 29" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="fatigueAssessmentInventoryString = &quot;&quot;;&amp;#10;fatigueAssessmentInventoryCounter = 0;&amp;#10;questionAmount = 29;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fatigueAssessmentInventoryCounter = (fatigueAssessmentInventoryCounter + 1);&amp;#10;if ((fatigueAssessmentInventoryCounter === 1)) {&amp;#10;    text_5.text = &quot;I feel drowsy when I am fatigued&quot;;&amp;#10;} else {&amp;#10;    if ((fatigueAssessmentInventoryCounter === 2)) {&amp;#10;        text_5.text = &quot;When I am fatigued, I lose my patience&quot;;&amp;#10;    } else {&amp;#10;        if ((fatigueAssessmentInventoryCounter === 3)) {&amp;#10;            text_5.text = &quot;My motivation is lower when I am fatigued&quot;;&amp;#10;        } else {&amp;#10;            if ((fatigueAssessmentInventoryCounter === 4)) {&amp;#10;                text_5.text = &quot;When I am fatigued, I have difficulty concentrating&quot;;&amp;#10;            } else {&amp;#10;                if ((fatigueAssessmentInventoryCounter === 5)) {&amp;#10;                    text_5.text = &quot;Exercise brings on my fatigue&quot;;&amp;#10;                } else {&amp;#10;                    if ((fatigueAssessmentInventoryCounter === 6)) {&amp;#10;                        text_5.text = &quot;Heat brings on my fatigue&quot;;&amp;#10;                    } else {&amp;#10;                        if ((fatigueAssessmentInventoryCounter === 7)) {&amp;#10;                            text_5.text = &quot;Long periods of inactivity bring on my fatigue&quot;;&amp;#10;                        } else {&amp;#10;                            if ((fatigueAssessmentInventoryCounter === 8)) {&amp;#10;                                text_5.text = &quot;Stress brings on my fatigue&quot;;&amp;#10;                            } else {&amp;#10;                                if ((fatigueAssessmentInventoryCounter === 9)) {&amp;#10;                                    text_5.text = &quot;Depression brings on my fatigue&quot;;&amp;#10;                                } else {&amp;#10;                                    if ((fatigueAssessmentInventoryCounter === 10)) {&amp;#10;                                        text_5.text = &quot;Work brings on my fatigue&quot;;&amp;#10;                                    } else {&amp;#10;                                        if ((fatigueAssessmentInventoryCounter === 11)) {&amp;#10;                                            text_5.text = &quot;My fatigue is worse in the afternoon&quot;;&amp;#10;                                        } else {&amp;#10;                                            if ((fatigueAssessmentInventoryCounter === 12)) {&amp;#10;                                                text_5.text = &quot;My fatigue is worse in the morning&quot;;&amp;#10;                                            } else {&amp;#10;                                                if ((fatigueAssessmentInventoryCounter === 13)) {&amp;#10;                                                    text_5.text = &quot;Performance of routine daily activities increases my fatigue&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if ((fatigueAssessmentInventoryCounter === 14)) {&amp;#10;                                                        text_5.text = &quot;Resting lessens my fatigue&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if ((fatigueAssessmentInventoryCounter === 15)) {&amp;#10;                                                            text_5.text = &quot;Sleeping lessens my fatigue&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if ((fatigueAssessmentInventoryCounter === 16)) {&amp;#10;                                                                text_5.text = &quot;Cool temperatures lessen my fatiuge&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if ((fatigueAssessmentInventoryCounter === 17)) {&amp;#10;                                                                    text_5.text = &quot;Positive experiences lessen my fatigue&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if ((fatigueAssessmentInventoryCounter === 18)) {&amp;#10;                                                                        text_5.text = &quot;I am easily fatigued&quot;;&amp;#10;                                                                    } else {&amp;#10;                                                                        if ((fatigueAssessmentInventoryCounter === 19)) {&amp;#10;                                                                            text_5.text = &quot;Fatigue interferes with my physical functioning&quot;;&amp;#10;                                                                        } else {&amp;#10;                                                                            if ((fatigueAssessmentInventoryCounter === 20)) {&amp;#10;                                                                                text_5.text = &quot;Fatiuge causes frequent problems for me&quot;;&amp;#10;                                                                            } else {&amp;#10;                                                                                if ((fatigueAssessmentInventoryCounter === 21)) {&amp;#10;                                                                                    text_5.text = &quot;My fatigue prevents sustained physical functioning&quot;;&amp;#10;                                                                                } else {&amp;#10;                                                                                    if ((fatigueAssessmentInventoryCounter === 22)) {&amp;#10;                                                                                        text_5.text = &quot;Fatigues interferes with carrying out certain duties and responsibilities&quot;;&amp;#10;                                                                                    } else {&amp;#10;                                                                                        if ((fatigueAssessmentInventoryCounter === 23)) {&amp;#10;                                                                                            text_5.text = &quot;Fatiuge predated other symptoms of my condition&quot;;&amp;#10;                                                                                        } else {&amp;#10;                                                                                            if ((fatigueAssessmentInventoryCounter === 24)) {&amp;#10;                                                                                                text_5.text = &quot;Fatigue is my most disabling symptom&quot;;&amp;#10;                                                                                            } else {&amp;#10;                                                                                                if ((fatigueAssessmentInventoryCounter === 25)) {&amp;#10;                                                                                                    text_5.text = &quot;Fatiuge is among my 3 most disabling symptoms&quot;;&amp;#10;                                                                                                } else {&amp;#10;                                                                                                    if ((fatigueAssessmentInventoryCounter === 26)) {&amp;#10;                                                                                                        text_5.text = &quot;Fatigue interferes with my work, family or social life&quot;;&amp;#10;                                                                                                    } else {&amp;#10;                                                                                                        if ((fatigueAssessmentInventoryCounter === 27)) {&amp;#10;                                                                                                            text_5.text = &quot;Fatigue makes other symptoms worse&quot;;&amp;#10;                                                                                                        } else {&amp;#10;                                                                                                            if ((fatigueAssessmentInventoryCounter === 28)) {&amp;#10;                                                                                                                text_5.text = &quot;Fatigue that i now experience is different in quality or severity than the fatigue i experienced before i developed this condition&quot;;&amp;#10;                                                                                                            } else {&amp;#10;                                                                                                                if ((fatigueAssessmentInventoryCounter === 29)) {&amp;#10;                                                                                                                    text_5.text = &quot;I experienced prolonged fatigue after exercise&quot;;&amp;#10;                                                                                                                }&amp;#10;                                                                                                            }&amp;#10;                                                                                                        }&amp;#10;                                                                                                    }&amp;#10;                                                                                                }&amp;#10;                                                                                            }&amp;#10;                                                                                        }&amp;#10;                                                                                    }&amp;#10;                                                                                }&amp;#10;                                                                            }&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="fatigueAssessmentInventoryCounter = fatigueAssessmentInventoryCounter + 1&amp;#10;&amp;#10;if fatigueAssessmentInventoryCounter == 1:&amp;#10;    text_5.text = &quot;I feel drowsy when I am fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 2:&amp;#10;    text_5.text = &quot;When I am fatigued, I lose my patience&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 3:&amp;#10;    text_5.text = &quot;My motivation is lower when I am fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 4:&amp;#10;    text_5.text = &quot;When I am fatigued, I have difficulty concentrating&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 5:&amp;#10;    text_5.text = &quot;Exercise brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 6:&amp;#10;    text_5.text = &quot;Heat brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 7:&amp;#10;    text_5.text = &quot;Long periods of inactivity bring on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 8:&amp;#10;    text_5.text = &quot;Stress brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 9:&amp;#10;    text_5.text = &quot;Depression brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 10:&amp;#10;    text_5.text = &quot;Work brings on my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 11:&amp;#10;    text_5.text = &quot;My fatigue is worse in the afternoon&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 12:&amp;#10;    text_5.text = &quot;My fatigue is worse in the morning&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 13:&amp;#10;    text_5.text = &quot;Performance of routine daily activities increases my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 14:&amp;#10;    text_5.text = &quot;Resting lessens my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 15:&amp;#10;    text_5.text = &quot;Sleeping lessens my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 16:&amp;#10;    text_5.text = &quot;Cool temperatures lessen my fatiuge&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 17:&amp;#10;    text_5.text = &quot;Positive experiences lessen my fatigue&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 18:&amp;#10;    text_5.text = &quot;I am easily fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 19:&amp;#10;    text_5.text = &quot;Fatigue interferes with my physical functioning&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 20:&amp;#10;    text_5.text = &quot;Fatiuge causes frequent problems for me&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 21:&amp;#10;    text_5.text = &quot;My fatigue prevents sustained physical functioning&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 22:&amp;#10;    text_5.text = &quot;Fatigues interferes with carrying out certain duties and responsibilities&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 23:&amp;#10;    text_5.text = &quot;Fatiuge predated other symptoms of my condition&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 24:&amp;#10;    text_5.text = &quot;Fatigue is my most disabling symptom&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 25:&amp;#10;    text_5.text = &quot;Fatiuge is among my 3 most disabling symptoms&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 26:&amp;#10;    text_5.text = &quot;Fatigue interferes with my work, family or social life&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 27:&amp;#10;    text_5.text = &quot;Fatigue makes other symptoms worse&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 28:&amp;#10;    text_5.text = &quot;Fatigue that i now experience is different in quality or severity than the fatigue i experienced before i developed this condition&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 29:&amp;#10;    text_5.text = &quot;I experienced prolonged fatigue after exercise&quot;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_11" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <SliderComponent name="slider_2">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="LightGray" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Red" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="4" valType="code" updates="None" name="initVal"/>
        <Param val="(&quot;Disagree: &quot; + str(1), 2, 3, 4, 5, 6, &quot;Agree: &quot; + str(7))" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,-0.1)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.0, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="rating" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5, 6, 7)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
    </Routine>
    <Routine name="VAS_F">
      <TextComponent name="text_11">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_11" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_12">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="fatigueAssessmentInventoryString = ''&amp;#10;fatigueAssessmentInventoryCounter = 0&amp;#10;questionAmount = 18" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="fatigueAssessmentInventoryString = &quot;&quot;;&amp;#10;fatigueAssessmentInventoryCounter = 0;&amp;#10;questionAmount = 18;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="fatigueAssessmentInventoryCounter = (fatigueAssessmentInventoryCounter + 1);&amp;#10;word = &quot;&quot;;&amp;#10;if ((fatigueAssessmentInventoryCounter === 1)) {&amp;#10;    word = &quot;tired&quot;;&amp;#10;} else {&amp;#10;    if ((fatigueAssessmentInventoryCounter === 2)) {&amp;#10;        word = &quot;sleepy&quot;;&amp;#10;    } else {&amp;#10;        if ((fatigueAssessmentInventoryCounter === 3)) {&amp;#10;            word = &quot;drowsy&quot;;&amp;#10;        } else {&amp;#10;            if ((fatigueAssessmentInventoryCounter === 4)) {&amp;#10;                word = &quot;fatigued&quot;;&amp;#10;            } else {&amp;#10;                if ((fatigueAssessmentInventoryCounter === 5)) {&amp;#10;                    word = &quot;worn out&quot;;&amp;#10;                } else {&amp;#10;                    if ((fatigueAssessmentInventoryCounter === 6)) {&amp;#10;                        word = &quot;energetic&quot;;&amp;#10;                    } else {&amp;#10;                        if ((fatigueAssessmentInventoryCounter === 7)) {&amp;#10;                            word = &quot;active&quot;;&amp;#10;                        } else {&amp;#10;                            if ((fatigueAssessmentInventoryCounter === 8)) {&amp;#10;                                word = &quot;vigorous&quot;;&amp;#10;                            } else {&amp;#10;                                if ((fatigueAssessmentInventoryCounter === 9)) {&amp;#10;                                    word = &quot;efficient&quot;;&amp;#10;                                } else {&amp;#10;                                    if ((fatigueAssessmentInventoryCounter === 10)) {&amp;#10;                                        word = &quot;lively&quot;;&amp;#10;                                    } else {&amp;#10;                                        if ((fatigueAssessmentInventoryCounter === 11)) {&amp;#10;                                            word = &quot;bushed&quot;;&amp;#10;                                        } else {&amp;#10;                                            if ((fatigueAssessmentInventoryCounter === 12)) {&amp;#10;                                                word = &quot;exhausted&quot;;&amp;#10;                                            } else {&amp;#10;                                                if ((fatigueAssessmentInventoryCounter === 13)) {&amp;#10;                                                    word = &quot;easy to keep my eyes open&quot;;&amp;#10;                                                } else {&amp;#10;                                                    if ((fatigueAssessmentInventoryCounter === 14)) {&amp;#10;                                                        word = &quot;easy to move my body&quot;;&amp;#10;                                                    } else {&amp;#10;                                                        if ((fatigueAssessmentInventoryCounter === 15)) {&amp;#10;                                                            word = &quot;easy to concentrate&quot;;&amp;#10;                                                        } else {&amp;#10;                                                            if ((fatigueAssessmentInventoryCounter === 16)) {&amp;#10;                                                                word = &quot;easy to talk&quot;;&amp;#10;                                                            } else {&amp;#10;                                                                if ((fatigueAssessmentInventoryCounter === 17)) {&amp;#10;                                                                    word = &quot;desired to close my eyes&quot;;&amp;#10;                                                                } else {&amp;#10;                                                                    if ((fatigueAssessmentInventoryCounter === 18)) {&amp;#10;                                                                        word = &quot;desired to lie down&quot;;&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;slider_3.labe = [((&quot;not &quot; + word) + 1.toString()), 2, 3, 4, 5, 6, 7, 8, 9, ((&quot;Very&quot; + word) + 10.toString())];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="fatigueAssessmentInventoryCounter = fatigueAssessmentInventoryCounter + 1&amp;#10;word = &quot;&quot;&amp;#10;&amp;#10;if fatigueAssessmentInventoryCounter == 1:&amp;#10;    word = &quot;tired&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 2:&amp;#10;    word = &quot;sleepy&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 3:&amp;#10;    word = &quot;drowsy&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 4:&amp;#10;    word = &quot;fatigued&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 5:&amp;#10;    word = &quot;worn out&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 6:&amp;#10;    word = &quot;energetic&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 7:&amp;#10;    word = &quot;active&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 8:&amp;#10;    word = &quot;vigorous&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 9:&amp;#10;    word = &quot;efficient&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 10:&amp;#10;    word = &quot;lively&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 11:&amp;#10;    word = &quot;bushed&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 12:&amp;#10;    word = &quot;exhausted&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 13:&amp;#10;    word = &quot;easy to keep my eyes open&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 14:&amp;#10;    word = &quot;easy to move my body&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 15:&amp;#10;    word = &quot;easy to concentrate&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 16:&amp;#10;    word = &quot;easy to talk&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 17:&amp;#10;    word = &quot;desired to close my eyes&quot;&amp;#10;elif fatigueAssessmentInventoryCounter == 18:&amp;#10;    word = &quot;desired to lie down&quot;&amp;#10;slider_3.labe = (&quot;not &quot; + word + str(1), 2, 3, 4, 5, 6, 7, 8, 9,  &quot;Very&quot; + word + str(10))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_12" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <SliderComponent name="slider_3">
        <Param val="White" valType="color" updates="constant" name="borderColor"/>
        <Param val="LightGray" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="Red" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="4" valType="code" updates="None" name="initVal"/>
        <Param val="(&quot;not at all: &quot; + str(1), 2, 3, 4, 5, 6, 7, 8, 9,  &quot;Very&quot; + str(10))" valType="list" updates="constant" name="labels"/>
        <Param val="0.03" valType="num" updates="constant" name="letterHeight"/>
        <Param val="slider_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,-0.1)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.0, 0.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="rating" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
    </Routine>
    <Routine name="Self_evaluation">
      <TextComponent name="text_12">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_12" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Self evaluation, press space when done" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_5" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="PVT1Finish"/>
    <Routine name="NasaTLX">
      <TextComponent name="text_13">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_13" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please fill the nasa tlx test.&amp;#10;&amp;#10;Press space to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_6">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_6" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Starter"/>
    <Routine name="Baseline"/>
    <Routine name="InstructionsPVT"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <Routine name="Target"/>
    <Routine name="Feedback"/>
    <Routine name="End_task"/>
    <LoopTerminator name="trials"/>
    <Routine name="Maths_Intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="trials_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="MathsNumGeneration"/>
    <Routine name="mathsTaskNew"/>
    <LoopTerminator name="trials_3"/>
    <Routine name="Tetris"/>
    <Routine name="NasaTLX"/>
    <Routine name="InstructionsPVT"/>
    <LoopInitiator loopType="TrialHandler" name="trials_6">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="trials_6" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <Routine name="Target"/>
    <Routine name="Feedback"/>
    <Routine name="End_task"/>
    <LoopTerminator name="trials_6"/>
    <Routine name="Maths_Intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials_5">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="trials_5" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="MathsNumGeneration"/>
    <Routine name="mathsTaskNew"/>
    <LoopTerminator name="trials_5"/>
    <Routine name="Snake"/>
    <Routine name="NasaTLX"/>
    <Routine name="InstructionsPVT"/>
    <LoopInitiator loopType="TrialHandler" name="trials_4">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="trials_4" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ISI"/>
    <Routine name="Target"/>
    <Routine name="Feedback"/>
    <Routine name="End_task"/>
    <LoopTerminator name="trials_4"/>
    <Routine name="Maths_Intro"/>
    <LoopInitiator loopType="TrialHandler" name="trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="99" valType="num"/>
      <Param name="name" updates="None" val="trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="MathsNumGeneration"/>
    <Routine name="mathsTaskNew"/>
    <LoopTerminator name="trials_2"/>
    <Routine name="Ender"/>
  </Flow>
</PsychoPy2experiment>
