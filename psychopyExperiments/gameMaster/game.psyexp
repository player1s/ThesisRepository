<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.5">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[800, 600]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="game" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Game is on! Switch to that window and start playing" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&quot;&quot;&quot;&amp;#10;Tetronimo (a Tetris clone)&amp;#10;&amp;#10;original author: Al Sweigart (al@inventwithpython.com)&amp;#10;{Making Games with Python and Pygame (2012)}&amp;#10;http://inventwithpython.com/pygame&amp;#10;Released under a &quot;Simplified BSD&quot; license&amp;#10;&amp;#10;&amp;#10;&amp;#10;Created on Thu Nov 30 10:29:55 2023&amp;#10;@author: elpid&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;gameTimeInSeconds = 60&amp;#10;&amp;#10;import random, time, pygame, sys&amp;#10;from pygame.locals import *&amp;#10;&amp;#10;FPS = 25&amp;#10;WINDOWWIDTH = 640&amp;#10;WINDOWHEIGHT = 480&amp;#10;BOXSIZE = 20&amp;#10;BOARDWIDTH = 10&amp;#10;BOARDHEIGHT = 20&amp;#10;BLANK = '.'&amp;#10;&amp;#10;MOVESIDEWAYSFREQ = 0.15&amp;#10;MOVEDOWNFREQ = 0.1&amp;#10;&amp;#10;XMARGIN = int((WINDOWWIDTH - BOARDWIDTH * BOXSIZE) / 2)&amp;#10;TOPMARGIN = WINDOWHEIGHT - (BOARDHEIGHT * BOXSIZE) - 5&amp;#10;&amp;#10;#               R    G    B&amp;#10;WHITE       = (255, 255, 255)&amp;#10;GRAY        = (185, 185, 185)&amp;#10;BLACK       = (  0,   0,   0)&amp;#10;RED         = (155,   0,   0)&amp;#10;LIGHTRED    = (175,  20,  20)&amp;#10;GREEN       = (  0, 155,   0)&amp;#10;LIGHTGREEN  = ( 20, 175,  20)&amp;#10;BLUE        = (  0,   0, 155)&amp;#10;LIGHTBLUE   = ( 20,  20, 175)&amp;#10;YELLOW      = (155, 155,   0)&amp;#10;LIGHTYELLOW = (175, 175,  20)&amp;#10;&amp;#10;BORDERCOLOR = BLUE&amp;#10;BGCOLOR = BLACK&amp;#10;TEXTCOLOR = WHITE&amp;#10;TEXTSHADOWCOLOR = GRAY&amp;#10;COLORS      = (     BLUE,      GREEN,      RED,      YELLOW)&amp;#10;LIGHTCOLORS = (LIGHTBLUE, LIGHTGREEN, LIGHTRED, LIGHTYELLOW)&amp;#10;assert len(COLORS) == len(LIGHTCOLORS) # each color must have light color&amp;#10;&amp;#10;TEMPLATEWIDTH = 5&amp;#10;TEMPLATEHEIGHT = 5&amp;#10;&amp;#10;S_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.....',&amp;#10;                     '..OO.',&amp;#10;                     '.OO..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..OO.',&amp;#10;                     '...O.',&amp;#10;                     '.....']]&amp;#10;&amp;#10;Z_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.....',&amp;#10;                     '.OO..',&amp;#10;                     '..OO.',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '.OO..',&amp;#10;                     '.O...',&amp;#10;                     '.....']]&amp;#10;&amp;#10;I_SHAPE_TEMPLATE = [['..O..',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     'OOOO.',&amp;#10;                     '.....',&amp;#10;                     '.....']]&amp;#10;&amp;#10;O_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.....',&amp;#10;                     '.OO..',&amp;#10;                     '.OO..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;J_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '.O...',&amp;#10;                     '.OOO.',&amp;#10;                     '.....',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..OO.',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     '.OOO.',&amp;#10;                     '...O.',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.OO..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;L_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '...O.',&amp;#10;                     '.OOO.',&amp;#10;                     '.....',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '..OO.',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     '.OOO.',&amp;#10;                     '.O...',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.OO..',&amp;#10;                     '..O..',&amp;#10;                     '..O..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;T_SHAPE_TEMPLATE = [['.....',&amp;#10;                     '..O..',&amp;#10;                     '.OOO.',&amp;#10;                     '.....',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '..OO.',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '.....',&amp;#10;                     '.OOO.',&amp;#10;                     '..O..',&amp;#10;                     '.....'],&amp;#10;                    ['.....',&amp;#10;                     '..O..',&amp;#10;                     '.OO..',&amp;#10;                     '..O..',&amp;#10;                     '.....']]&amp;#10;&amp;#10;PIECES = {'S': S_SHAPE_TEMPLATE,&amp;#10;          'Z': Z_SHAPE_TEMPLATE,&amp;#10;          'J': J_SHAPE_TEMPLATE,&amp;#10;          'L': L_SHAPE_TEMPLATE,&amp;#10;          'I': I_SHAPE_TEMPLATE,&amp;#10;          'O': O_SHAPE_TEMPLATE,&amp;#10;          'T': T_SHAPE_TEMPLATE}&amp;#10;&amp;#10;&amp;#10;def main():&amp;#10;    global FPSCLOCK, DISPLAYSURF, BASICFONT, BIGFONT&amp;#10;    pygame.init()&amp;#10;    FPSCLOCK = pygame.time.Clock()&amp;#10;    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))&amp;#10;    BASICFONT = pygame.font.Font('freesansbold.ttf', 18)&amp;#10;    BIGFONT = pygame.font.Font('freesansbold.ttf', 100)&amp;#10;    pygame.display.set_caption('Tetromino')&amp;#10;&amp;#10;    showTextScreen('Tetromino')&amp;#10;    while True: # game loop&amp;#10;        #if random.randint(0, 1) == 0:&amp;#10;        #    pygame.mixer.music.load('tetrisb.mid')&amp;#10;        #else:&amp;#10;        #    pygame.mixer.music.load('tetrisc.mid')&amp;#10;        #pygame.mixer.music.play(-1, 0.0)&amp;#10;        runGame()&amp;#10;        #pygame.mixer.music.stop()&amp;#10;        showTextScreen('Done')&amp;#10;        return&amp;#10;&amp;#10;&amp;#10;def runGame():&amp;#10;    # setup variables for the start of the game&amp;#10;    board = getBlankBoard()&amp;#10;    lastMoveDownTime = time.time()&amp;#10;    lastMoveSidewaysTime = time.time()&amp;#10;    lastFallTime = time.time()&amp;#10;    movingDown = False # note: there is no movingUp variable&amp;#10;    movingLeft = False&amp;#10;    movingRight = False&amp;#10;    score = 0&amp;#10;    level, fallFreq = calculateLevelAndFallFreq(score)&amp;#10;    playTime = time.time()&amp;#10;&amp;#10;    fallingPiece = getNewPiece()&amp;#10;    nextPiece = getNewPiece()&amp;#10;&amp;#10;    while True: # game loop&amp;#10;        nowTime = time.time()&amp;#10;&amp;#10;        if nowTime &gt; playTime + gameTimeInSeconds:&amp;#10;            return&amp;#10;        &amp;#10;        if fallingPiece == None:&amp;#10;            # No falling piece in play, so start a new piece at the top&amp;#10;            fallingPiece = nextPiece&amp;#10;            nextPiece = getNewPiece()&amp;#10;            lastFallTime = time.time() # reset lastFallTime&amp;#10;&amp;#10;            if not isValidPosition(board, fallingPiece):&amp;#10;                board = getBlankBoard() # return for original functionlity: end game on fail. Here though we clear the board and decrease the score by 20 which decreases the level by 2.&amp;#10;                outlet.push_sample(x=[failTetris])&amp;#10;                #return # can't fit a new piece on the board, so game over&amp;#10;&amp;#10;        checkForQuit()&amp;#10;        for event in pygame.event.get(): # event handling loop&amp;#10;            if event.type == KEYUP:&amp;#10;                if (event.key == K_p):&amp;#10;                    # Pausing the game&amp;#10;                    DISPLAYSURF.fill(BGCOLOR)&amp;#10;                    pygame.mixer.music.stop()&amp;#10;                    showTextScreen('Paused') # pause until a key press&amp;#10;                    pygame.mixer.music.play(-1, 0.0)&amp;#10;                    lastFallTime = time.time()&amp;#10;                    lastMoveDownTime = time.time()&amp;#10;                    lastMoveSidewaysTime = time.time()&amp;#10;                elif (event.key == K_LEFT or event.key == K_a):&amp;#10;                    movingLeft = False&amp;#10;                elif (event.key == K_RIGHT or event.key == K_d):&amp;#10;                    movingRight = False&amp;#10;                elif (event.key == K_DOWN or event.key == K_s):&amp;#10;                    movingDown = False&amp;#10;&amp;#10;            elif event.type == KEYDOWN:&amp;#10;                # moving the piece sideways&amp;#10;                if (event.key == K_LEFT or event.key == K_a) and isValidPosition(board, fallingPiece, adjX=-1):&amp;#10;                    fallingPiece['x'] -= 1&amp;#10;                    movingLeft = True&amp;#10;                    movingRight = False&amp;#10;                    lastMoveSidewaysTime = time.time()&amp;#10;&amp;#10;                elif (event.key == K_RIGHT or event.key == K_d) and isValidPosition(board, fallingPiece, adjX=1):&amp;#10;                    fallingPiece['x'] += 1&amp;#10;                    movingRight = True&amp;#10;                    movingLeft = False&amp;#10;                    lastMoveSidewaysTime = time.time()&amp;#10;&amp;#10;                # rotating the piece (if there is room to rotate)&amp;#10;                elif (event.key == K_UP or event.key == K_w):&amp;#10;                    fallingPiece['rotation'] = (fallingPiece['rotation'] + 1) % len(PIECES[fallingPiece['shape']])&amp;#10;                    if not isValidPosition(board, fallingPiece):&amp;#10;                        fallingPiece['rotation'] = (fallingPiece['rotation'] - 1) % len(PIECES[fallingPiece['shape']])&amp;#10;                elif (event.key == K_q): # rotate the other direction&amp;#10;                    fallingPiece['rotation'] = (fallingPiece['rotation'] - 1) % len(PIECES[fallingPiece['shape']])&amp;#10;                    if not isValidPosition(board, fallingPiece):&amp;#10;                        fallingPiece['rotation'] = (fallingPiece['rotation'] + 1) % len(PIECES[fallingPiece['shape']])&amp;#10;&amp;#10;                # making the piece fall faster with the down key&amp;#10;                elif (event.key == K_DOWN or event.key == K_s):&amp;#10;                    movingDown = True&amp;#10;                    if isValidPosition(board, fallingPiece, adjY=1):&amp;#10;                        fallingPiece['y'] += 1&amp;#10;                    lastMoveDownTime = time.time()&amp;#10;&amp;#10;                # move the current piece all the way down&amp;#10;                elif event.key == K_SPACE:&amp;#10;                    movingDown = False&amp;#10;                    movingLeft = False&amp;#10;                    movingRight = False&amp;#10;                    for i in range(1, BOARDHEIGHT):&amp;#10;                        if not isValidPosition(board, fallingPiece, adjY=i):&amp;#10;                            break&amp;#10;                    fallingPiece['y'] += i - 1&amp;#10;&amp;#10;        # handle moving the piece because of user input&amp;#10;        if (movingLeft or movingRight) and time.time() - lastMoveSidewaysTime &gt; MOVESIDEWAYSFREQ:&amp;#10;            if movingLeft and isValidPosition(board, fallingPiece, adjX=-1):&amp;#10;                fallingPiece['x'] -= 1&amp;#10;            elif movingRight and isValidPosition(board, fallingPiece, adjX=1):&amp;#10;                fallingPiece['x'] += 1&amp;#10;            lastMoveSidewaysTime = time.time()&amp;#10;&amp;#10;        if movingDown and time.time() - lastMoveDownTime &gt; MOVEDOWNFREQ and isValidPosition(board, fallingPiece, adjY=1):&amp;#10;            fallingPiece['y'] += 1&amp;#10;            lastMoveDownTime = time.time()&amp;#10;&amp;#10;        # let the piece fall if it is time to fall&amp;#10;        if time.time() - lastFallTime &gt; fallFreq:&amp;#10;            # see if the piece has landed&amp;#10;            if not isValidPosition(board, fallingPiece, adjY=1):&amp;#10;                # falling piece has landed, set it on the board&amp;#10;                addToBoard(board, fallingPiece)&amp;#10;                score += removeCompleteLines(board)&amp;#10;                levelTemp = level&amp;#10;                level, fallFreq = calculateLevelAndFallFreq(score)&amp;#10;                fallingPiece = None&amp;#10;                if level == levelTemp + 1:&amp;#10;                    outlet.push_sample(x=[levelGainTetris])&amp;#10;            else:&amp;#10;                # piece did not land, just move the piece down&amp;#10;                fallingPiece['y'] += 1&amp;#10;                lastFallTime = time.time()&amp;#10;&amp;#10;        # drawing everything on the screen&amp;#10;        DISPLAYSURF.fill(BGCOLOR)&amp;#10;        drawBoard(board)&amp;#10;        drawStatus(score, level)&amp;#10;        drawNextPiece(nextPiece)&amp;#10;        if fallingPiece != None:&amp;#10;            drawPiece(fallingPiece)&amp;#10;&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick(FPS)&amp;#10;&amp;#10;&amp;#10;def makeTextObjs(text, font, color):&amp;#10;    surf = font.render(text, True, color)&amp;#10;    return surf, surf.get_rect()&amp;#10;&amp;#10;&amp;#10;def terminate():&amp;#10;    pygame.quit()&amp;#10;    sys.exit()&amp;#10;&amp;#10;&amp;#10;def checkForKeyPress():&amp;#10;    # Go through event queue looking for a KEYUP event.&amp;#10;    # Grab KEYDOWN events to remove them from the event queue.&amp;#10;    checkForQuit()&amp;#10;&amp;#10;    for event in pygame.event.get([KEYDOWN, KEYUP]):&amp;#10;        if event.type == KEYDOWN:&amp;#10;            continue&amp;#10;        return event.key&amp;#10;    return None&amp;#10;&amp;#10;&amp;#10;def showTextScreen(text):&amp;#10;    # This function displays large text in the&amp;#10;    # center of the screen until a key is pressed.&amp;#10;    # Draw the text drop shadow&amp;#10;    titleSurf, titleRect = makeTextObjs(text, BIGFONT, TEXTSHADOWCOLOR)&amp;#10;    titleRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2))&amp;#10;    DISPLAYSURF.blit(titleSurf, titleRect)&amp;#10;&amp;#10;    # Draw the text&amp;#10;    titleSurf, titleRect = makeTextObjs(text, BIGFONT, TEXTCOLOR)&amp;#10;    titleRect.center = (int(WINDOWWIDTH / 2) - 3, int(WINDOWHEIGHT / 2) - 3)&amp;#10;    DISPLAYSURF.blit(titleSurf, titleRect)&amp;#10;&amp;#10;    # Draw the additional &quot;Press a key to play.&quot; text.&amp;#10;    pressKeySurf, pressKeyRect = makeTextObjs('Press space to continue.', BASICFONT, TEXTCOLOR)&amp;#10;    pressKeyRect.center = (int(WINDOWWIDTH / 2), int(WINDOWHEIGHT / 2) + 100)&amp;#10;    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)&amp;#10;&amp;#10;    while checkForKeyPress() == None:&amp;#10;        pygame.display.update()&amp;#10;        FPSCLOCK.tick()&amp;#10;&amp;#10;&amp;#10;def checkForQuit():&amp;#10;    for event in pygame.event.get(QUIT): # get all the QUIT events&amp;#10;        terminate() # terminate if any QUIT events are present&amp;#10;    for event in pygame.event.get(KEYUP): # get all the KEYUP events&amp;#10;        if event.key == K_ESCAPE:&amp;#10;            terminate() # terminate if the KEYUP event was for the Esc key&amp;#10;        pygame.event.post(event) # put the other KEYUP event objects back&amp;#10;&amp;#10;&amp;#10;def calculateLevelAndFallFreq(score):&amp;#10;    # Based on the score, return the level the player is on and&amp;#10;    # how many seconds pass until a falling piece falls one space.&amp;#10;    level = int(score / 10) + 1&amp;#10;    fallFreq = 0.3 - (level * 0.02)&amp;#10;    return level, fallFreq&amp;#10;&amp;#10;def getNewPiece():&amp;#10;    # return a random new piece in a random rotation and color&amp;#10;    shape = random.choice(list(PIECES.keys()))&amp;#10;    newPiece = {'shape': shape,&amp;#10;                'rotation': random.randint(0, len(PIECES[shape]) - 1),&amp;#10;                'x': int(BOARDWIDTH / 2) - int(TEMPLATEWIDTH / 2),&amp;#10;                'y': -2, # start it above the board (i.e. less than 0)&amp;#10;                'color': random.randint(0, len(COLORS)-1)}&amp;#10;    return newPiece&amp;#10;&amp;#10;&amp;#10;def addToBoard(board, piece):&amp;#10;    # fill in the board based on piece's location, shape, and rotation&amp;#10;    for x in range(TEMPLATEWIDTH):&amp;#10;        for y in range(TEMPLATEHEIGHT):&amp;#10;            if PIECES[piece['shape']][piece['rotation']][y][x] != BLANK:&amp;#10;                board[x + piece['x']][y + piece['y']] = piece['color']&amp;#10;&amp;#10;&amp;#10;def getBlankBoard():&amp;#10;    # create and return a new blank board data structure&amp;#10;    board = []&amp;#10;    for i in range(BOARDWIDTH):&amp;#10;        board.append([BLANK] * BOARDHEIGHT)&amp;#10;    return board&amp;#10;&amp;#10;&amp;#10;def isOnBoard(x, y):&amp;#10;    return x &gt;= 0 and x &lt; BOARDWIDTH and y &lt; BOARDHEIGHT&amp;#10;&amp;#10;&amp;#10;def isValidPosition(board, piece, adjX=0, adjY=0):&amp;#10;    # Return True if the piece is within the board and not colliding&amp;#10;    for x in range(TEMPLATEWIDTH):&amp;#10;        for y in range(TEMPLATEHEIGHT):&amp;#10;            isAboveBoard = y + piece['y'] + adjY &lt; 0&amp;#10;            if isAboveBoard or PIECES[piece['shape']][piece['rotation']][y][x] == BLANK:&amp;#10;                continue&amp;#10;            if not isOnBoard(x + piece['x'] + adjX, y + piece['y'] + adjY):&amp;#10;                return False&amp;#10;            if board[x + piece['x'] + adjX][y + piece['y'] + adjY] != BLANK:&amp;#10;                return False&amp;#10;    return True&amp;#10;&amp;#10;def isCompleteLine(board, y):&amp;#10;    # Return True if the line filled with boxes with no gaps.&amp;#10;    for x in range(BOARDWIDTH):&amp;#10;        if board[x][y] == BLANK:&amp;#10;            return False&amp;#10;    return True&amp;#10;&amp;#10;&amp;#10;def removeCompleteLines(board):&amp;#10;    # Remove any completed lines on the board, move everything above them down, and return the number of complete lines.&amp;#10;    numLinesRemoved = 0&amp;#10;    y = BOARDHEIGHT - 1 # start y at the bottom of the board&amp;#10;    while y &gt;= 0:&amp;#10;        if isCompleteLine(board, y):&amp;#10;            # Remove the line and pull boxes down by one line.&amp;#10;            for pullDownY in range(y, 0, -1):&amp;#10;                for x in range(BOARDWIDTH):&amp;#10;                    board[x][pullDownY] = board[x][pullDownY-1]&amp;#10;            # Set very top line to blank.&amp;#10;            for x in range(BOARDWIDTH):&amp;#10;                board[x][0] = BLANK&amp;#10;            numLinesRemoved += 1&amp;#10;            # Note on the next iteration of the loop, y is the same.&amp;#10;            # This is so that if the line that was pulled down is also&amp;#10;            # complete, it will be removed.&amp;#10;        else:&amp;#10;            y -= 1 # move on to check next row up&amp;#10;    return numLinesRemoved&amp;#10;&amp;#10;&amp;#10;def convertToPixelCoords(boxx, boxy):&amp;#10;    # Convert the given xy coordinates of the board to xy&amp;#10;    # coordinates of the location on the screen.&amp;#10;    return (XMARGIN + (boxx * BOXSIZE)), (TOPMARGIN + (boxy * BOXSIZE))&amp;#10;&amp;#10;&amp;#10;def drawBox(boxx, boxy, color, pixelx=None, pixely=None):&amp;#10;    # draw a single box (each tetromino piece has four boxes)&amp;#10;    # at xy coordinates on the board. Or, if pixelx &amp; pixely&amp;#10;    # are specified, draw to the pixel coordinates stored in&amp;#10;    # pixelx &amp; pixely (this is used for the &quot;Next&quot; piece).&amp;#10;    if color == BLANK:&amp;#10;        return&amp;#10;    if pixelx == None and pixely == None:&amp;#10;        pixelx, pixely = convertToPixelCoords(boxx, boxy)&amp;#10;    pygame.draw.rect(DISPLAYSURF, COLORS[color], (pixelx + 1, pixely + 1, BOXSIZE - 1, BOXSIZE - 1))&amp;#10;    pygame.draw.rect(DISPLAYSURF, LIGHTCOLORS[color], (pixelx + 1, pixely + 1, BOXSIZE - 4, BOXSIZE - 4))&amp;#10;&amp;#10;&amp;#10;def drawBoard(board):&amp;#10;    # draw the border around the board&amp;#10;    pygame.draw.rect(DISPLAYSURF, BORDERCOLOR, (XMARGIN - 3, TOPMARGIN - 7, (BOARDWIDTH * BOXSIZE) + 8, (BOARDHEIGHT * BOXSIZE) + 8), 5)&amp;#10;&amp;#10;    # fill the background of the board&amp;#10;    pygame.draw.rect(DISPLAYSURF, BGCOLOR, (XMARGIN, TOPMARGIN, BOXSIZE * BOARDWIDTH, BOXSIZE * BOARDHEIGHT))&amp;#10;    # draw the individual boxes on the board&amp;#10;    for x in range(BOARDWIDTH):&amp;#10;        for y in range(BOARDHEIGHT):&amp;#10;            drawBox(x, y, board[x][y])&amp;#10;&amp;#10;&amp;#10;def drawStatus(score, level):&amp;#10;    # draw the score text&amp;#10;    scoreSurf = BASICFONT.render('Score: %s' % score, True, TEXTCOLOR)&amp;#10;    scoreRect = scoreSurf.get_rect()&amp;#10;    scoreRect.topleft = (WINDOWWIDTH - 150, 20)&amp;#10;    DISPLAYSURF.blit(scoreSurf, scoreRect)&amp;#10;&amp;#10;    # draw the level text&amp;#10;    levelSurf = BASICFONT.render('Level: %s' % level, True, TEXTCOLOR)&amp;#10;    levelRect = levelSurf.get_rect()&amp;#10;    levelRect.topleft = (WINDOWWIDTH - 150, 50)&amp;#10;    DISPLAYSURF.blit(levelSurf, levelRect)&amp;#10;&amp;#10;&amp;#10;def drawPiece(piece, pixelx=None, pixely=None):&amp;#10;    shapeToDraw = PIECES[piece['shape']][piece['rotation']]&amp;#10;    if pixelx == None and pixely == None:&amp;#10;        # if pixelx &amp; pixely hasn't been specified, use the location stored in the piece data structure&amp;#10;        pixelx, pixely = convertToPixelCoords(piece['x'], piece['y'])&amp;#10;&amp;#10;    # draw each of the boxes that make up the piece&amp;#10;    for x in range(TEMPLATEWIDTH):&amp;#10;        for y in range(TEMPLATEHEIGHT):&amp;#10;            if shapeToDraw[y][x] != BLANK:&amp;#10;                drawBox(None, None, piece['color'], pixelx + (x * BOXSIZE), pixely + (y * BOXSIZE))&amp;#10;&amp;#10;&amp;#10;def drawNextPiece(piece):&amp;#10;    # draw the &quot;next&quot; text&amp;#10;    nextSurf = BASICFONT.render('Next:', True, TEXTCOLOR)&amp;#10;    nextRect = nextSurf.get_rect()&amp;#10;    nextRect.topleft = (WINDOWWIDTH - 120, 80)&amp;#10;    DISPLAYSURF.blit(nextSurf, nextRect)&amp;#10;    # draw the &quot;next&quot; piece&amp;#10;    drawPiece(piece, pixelx=WINDOWWIDTH-120, pixely=100)&amp;#10;&amp;#10;&amp;#10;if __name__ == '__main__':&amp;#10;    main()" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Starter">
      <TextComponent name="text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="to start, press space" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param val="from pylsl import StreamInfo, StreamOutlet&amp;#10;from psychopy import event&amp;#10;import time " valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import {StreamInfo, StreamOutlet} from 'pylsl';&amp;#10;import {event} from 'psychopy';&amp;#10;import * as time from 'time';&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="#event ids&amp;#10;startRest = 1&amp;#10;startTetris = 2&amp;#10;failTetris = 3&amp;#10;levelGainTetris = 4&amp;#10;&amp;#10;info = StreamInfo(name='LSL_Markers', type='Markers', channel_count=1,&amp;#10;                  channel_format='int32', source_id='Psychopy Markers')&amp;#10;# Initialize the stream.&amp;#10;outlet = StreamOutlet(info)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="startRest = 1;&amp;#10;startTetris = 2;&amp;#10;failTetris = 3;&amp;#10;levelGainTetris = 4;&amp;#10;info = new StreamInfo({&quot;name&quot;: &quot;LSL_Markers&quot;, &quot;type&quot;: &quot;Markers&quot;, &quot;channel_count&quot;: 1, &quot;channel_format&quot;: &quot;int32&quot;, &quot;source_id&quot;: &quot;Psychopy Markers&quot;});&amp;#10;outlet = new StreamOutlet(info);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log(&quot;startRest&quot;);&amp;#10;flag_start = true;&amp;#10;outlet.push_sample({&quot;x&quot;: [startRest]});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print('startRest')&amp;#10;flag_start = True&amp;#10;outlet.push_sample(x=[startRest])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="Ender">
      <TextComponent name="text_3">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Done" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="Rest">
      <TextComponent name="text_4">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="5 seconds of rest, please stay still. (raise to 30 later for baseline)" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="console.log(&quot;startTetris&quot;);&amp;#10;flag_start = true;&amp;#10;outlet.push_sample({&quot;x&quot;: [startTetris]});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="print('startTetris')&amp;#10;flag_start = True&amp;#10;outlet.push_sample(x=[startTetris])" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Starter"/>
    <Routine name="Rest"/>
    <Routine name="trial"/>
    <Routine name="Ender"/>
  </Flow>
</PsychoPy2experiment>
